{"docs": [{"name": "elm-lang/core", "modules": [{"name": "Date", "comment": " Library for working with dates. Email the mailing list if you encounter\nissues with internationalization or locale formatting.\n\n# Dates\n@docs Date, now\n\n# Conversions\n@docs fromString, toTime, fromTime\n\n# Extractions\n@docs year, month, Month, day, dayOfWeek, Day, hour, minute, second, millisecond\n\n", "aliases": [], "types": [{"name": "Date", "comment": " Representation of a date.\n", "args": [], "cases": []}, {"name": "Day", "comment": " Represents the days of the week.\n", "args": [], "cases": [["Mon", []], ["Tue", []], ["Wed", []], ["Thu", []], ["Fri", []], ["Sat", []], ["Sun", []]]}, {"name": "Month", "comment": " Represents the month of the year.\n", "args": [], "cases": [["Jan", []], ["Feb", []], ["Mar", []], ["Apr", []], ["May", []], ["Jun", []], ["Jul", []], ["Aug", []], ["Sep", []], ["Oct", []], ["Nov", []], ["Dec", []]]}], "values": [{"name": "day", "comment": " Extract the day of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `23`.\n", "type": "Date.Date -> Int"}, {"name": "dayOfWeek", "comment": " Extract the day of the week for a given date. Given the date 23 June\n1990 at 11:45AM this returns the day `Sat` as defined below.\n", "type": "Date.Date -> Date.Day"}, {"name": "fromString", "comment": " Attempt to read a date from a string.\n", "type": "String -> Result.Result String Date.Date"}, {"name": "fromTime", "comment": " Convert a time in milliseconds into a `Date`.\n\nA time is the number of milliseconds since\n[the Unix epoch](http://en.wikipedia.org/wiki/Unix_time).\n", "type": "Time.Time -> Date.Date"}, {"name": "hour", "comment": " Extract the hour of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `11`.\n", "type": "Date.Date -> Int"}, {"name": "millisecond", "comment": " Extract the millisecond of a given date. Given the date 23 June 1990 at 11:45:30.123AM\nthis returns the integer `123`.\n", "type": "Date.Date -> Int"}, {"name": "minute", "comment": " Extract the minute of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `45`.\n", "type": "Date.Date -> Int"}, {"name": "month", "comment": " Extract the month of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the month `Jun` as defined below.\n", "type": "Date.Date -> Date.Month"}, {"name": "now", "comment": " Get the `Date` at the moment when this task is run.\n", "type": "Task.Task x Date.Date"}, {"name": "second", "comment": " Extract the second of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `0`.\n", "type": "Date.Date -> Int"}, {"name": "toTime", "comment": " Convert a `Date` to a time in milliseconds.\n\nA time is the number of milliseconds since\n[the Unix epoch](http://en.wikipedia.org/wiki/Unix_time).\n", "type": "Date.Date -> Time.Time"}, {"name": "year", "comment": " Extract the year of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `1990`.\n", "type": "Date.Date -> Int"}], "generated-with-elm-version": "0.18.0"}, {"name": "Random", "comment": " This library helps you generate pseudo-random values.\n\nThis library is all about building [`generators`](#Generator) for whatever\ntype of values you need. There are a bunch of primitive generators like\n[`bool`](#bool) and [`int`](#int) that you can build up into fancier\ngenerators with functions like [`list`](#list) and [`map`](#map).\n\nIt may be helpful to [read about JSON decoders][json] because they work very\nsimilarly.\n\n[json]: https://evancz.gitbooks.io/an-introduction-to-elm/content/interop/json.html\n\n> *Note:* This is an implementation of the Portable Combined Generator of\nL'Ecuyer for 32-bit computers. It is almost a direct translation from the\n[System.Random](http://hackage.haskell.org/package/random-1.0.1.1/docs/System-Random.html)\nmodule. It has a period of roughly 2.30584e18.\n\n# Generators\n@docs Generator\n\n# Primitive Generators\n@docs bool, int, float\n\n# Data Structure Generators\n@docs pair, list\n\n# Custom Generators\n@docs map, map2, map3, map4, map5, andThen\n\n# Generate Values\n@docs generate\n\n# Generate Values Manually\n@docs step, Seed, initialSeed\n\n# Constants\n@docs maxInt, minInt\n\n", "aliases": [], "types": [{"name": "Generator", "comment": " A `Generator` is like a recipe for generating certain random values. So a\n`Generator Int` describes how to generate integers and a `Generator String`\ndescribes how to generate strings.\n\nTo actually *run* a generator and produce the random values, you need to use\nfunctions like [`generate`](#generate) and [`initialSeed`](#initialSeed).\n", "args": ["a"], "cases": []}, {"name": "Seed", "comment": " A `Seed` is the source of randomness in this whole system. Whenever\nyou want to use a generator, you need to pair it with a seed.\n", "args": [], "cases": []}], "values": [{"name": "andThen", "comment": " Chain random operations, threading through the seed. In the following\nexample, we will generate a random letter by putting together uppercase and\nlowercase letters.\n\n    letter : Generator Char\n    letter =\n      bool\n        |> andThen upperOrLower\n\n    upperOrLower : Bool -> Generator Char\n    upperOrLower b =\n      if b then uppercaseLetter else lowercaseLetter\n\n    -- bool : Generator Bool\n    -- uppercaseLetter : Generator Char\n    -- lowercaseLetter : Generator Char\n", "type": "(a -> Random.Generator b) -> Random.Generator a -> Random.Generator b"}, {"name": "bool", "comment": " Create a generator that produces boolean values. The following example\nsimulates a coin flip that may land heads or tails.\n\n    type Flip = Heads | Tails\n\n    coinFlip : Generator Flip\n    coinFlip =\n        map (\\b -> if b then Heads else Tails) bool\n", "type": "Random.Generator Bool"}, {"name": "float", "comment": " Generate floats in a given range. The following example is a generator\nthat produces decimals between 0 and 1.\n\n    probability : Generator Float\n    probability =\n        float 0 1\n", "type": "Float -> Float -> Random.Generator Float"}, {"name": "generate", "comment": " Create a command that will generate random values.\n\nRead more about how to use this in your programs in [The Elm Architecture\ntutorial][arch] which has a section specifically [about random values][rand].\n\n[arch]: https://evancz.gitbooks.io/an-introduction-to-elm/content/architecture/index.html\n[rand]: https://evancz.gitbooks.io/an-introduction-to-elm/content/architecture/effects/random.html\n", "type": "(a -> msg) -> Random.Generator a -> Platform.Cmd.Cmd msg"}, {"name": "initialSeed", "comment": " Create a &ldquo;seed&rdquo; of randomness which makes it possible to\ngenerate random values. If you use the same seed many times, it will result\nin the same thing every time! A good way to get an unexpected seed is to use\nthe current time.\n", "type": "Int -> Random.Seed"}, {"name": "int", "comment": " Generate 32-bit integers in a given range.\n\n    int 0 10   -- an integer between zero and ten\n    int -5 5   -- an integer between -5 and 5\n\n    int minInt maxInt  -- an integer in the widest range feasible\n\nThis function *can* produce values outside of the range [[`minInt`](#minInt),\n[`maxInt`](#maxInt)] but sufficient randomness is not guaranteed.\n", "type": "Int -> Int -> Random.Generator Int"}, {"name": "list", "comment": " Create a list of random values.\n\n    floatList : Generator (List Float)\n    floatList =\n        list 10 (float 0 1)\n\n    intList : Generator (List Int)\n    intList =\n        list 5 (int 0 100)\n\n    intPairs : Generator (List (Int, Int))\n    intPairs =\n        list 10 <| pair (int 0 100) (int 0 100)\n", "type": "Int -> Random.Generator a -> Random.Generator (List a)"}, {"name": "map", "comment": " Transform the values produced by a generator. The following examples show\nhow to generate booleans and letters based on a basic integer generator.\n\n    bool : Generator Bool\n    bool =\n      map ((==) 1) (int 0 1)\n\n    lowercaseLetter : Generator Char\n    lowercaseLetter =\n      map (\\n -> Char.fromCode (n + 97)) (int 0 25)\n\n    uppercaseLetter : Generator Char\n    uppercaseLetter =\n      map (\\n -> Char.fromCode (n + 65)) (int 0 25)\n\n", "type": "(a -> b) -> Random.Generator a -> Random.Generator b"}, {"name": "map2", "comment": " Combine two generators.\n\nThis function is used to define things like [`pair`](#pair) where you want to\nput two generators together.\n\n    pair : Generator a -> Generator b -> Generator (a,b)\n    pair genA genB =\n      map2 (,) genA genB\n\n", "type": "(a -> b -> c) -> Random.Generator a -> Random.Generator b -> Random.Generator c"}, {"name": "map3", "comment": " Combine three generators. This could be used to produce random colors.\n\n    import Color\n\n    rgb : Generator Color.Color\n    rgb =\n      map3 Color.rgb (int 0 255) (int 0 255) (int 0 255)\n\n    hsl : Generator Color.Color\n    hsl =\n      map3 Color.hsl (map degrees (int 0 360)) (float 0 1) (float 0 1)\n", "type": "(a -> b -> c -> d) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d"}, {"name": "map4", "comment": " Combine four generators.\n", "type": "(a -> b -> c -> d -> e) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e"}, {"name": "map5", "comment": " Combine five generators.\n", "type": "(a -> b -> c -> d -> e -> f) -> Random.Generator a -> Random.Generator b -> Random.Generator c -> Random.Generator d -> Random.Generator e -> Random.Generator f"}, {"name": "maxInt", "comment": " The maximum value for randomly generated 32-bit ints: 2147483647 ", "type": "Int"}, {"name": "minInt", "comment": " The minimum value for randomly generated 32-bit ints: -2147483648 ", "type": "Int"}, {"name": "pair", "comment": " Create a pair of random values. A common use of this might be to generate\na point in a certain 2D space. Imagine we have a collage that is 400 pixels\nwide and 200 pixels tall.\n\n    randomPoint : Generator (Int,Int)\n    randomPoint =\n        pair (int -200 200) (int -100 100)\n\n", "type": "Random.Generator a -> Random.Generator b -> Random.Generator ( a, b )"}, {"name": "step", "comment": " Generate a random value as specified by a given `Generator`.\n\nIn the following example, we are trying to generate a number between 0 and 100\nwith the `int 0 100` generator. Each time we call `step` we need to provide a\nseed. This will produce a random number and a *new* seed to use if we want to\nrun other generators later.\n\nSo here it is done right, where we get a new seed from each `step` call and\nthread that through.\n\n    seed0 = initialSeed 31415\n\n    -- step (int 0 100) seed0 ==> (42, seed1)\n    -- step (int 0 100) seed1 ==> (31, seed2)\n    -- step (int 0 100) seed2 ==> (99, seed3)\n\nNotice that we use different seeds on each line. This is important! If you use\nthe same seed, you get the same results.\n\n    -- step (int 0 100) seed0 ==> (42, seed1)\n    -- step (int 0 100) seed0 ==> (42, seed1)\n    -- step (int 0 100) seed0 ==> (42, seed1)\n", "type": "Random.Generator a -> Random.Seed -> ( a, Random.Seed )"}], "generated-with-elm-version": "0.18.0"}, {"name": "Process", "comment": "\n\n# Processes\n@docs Id, spawn, sleep, kill\n\n## Future Plans\n\nRight now, this library is pretty sparse. For example, there is no public API\nfor processes to communicate with each other. This is a really important\nability, but it is also something that is extraordinarily easy to get wrong!\n\nI think the trend will be towards an Erlang style of concurrency, where every\nprocess has an \u201cevent queue\u201d that anyone can send messages to. I currently\nthink the API will be extended to be more like this:\n\n    type Id exit msg\n\n    spawn : Task exit a -> Task x (Id exit Never)\n\n    kill : Id exit msg -> Task x ()\n\n    send : Id exit msg -> msg -> Task x ()\n\nA process `Id` will have two type variables to make sure all communication is\nvalid. The `exit` type describes the messages that are produced if the process\nfails because of user code. So if processes are linked and trapping errors,\nthey will need to handle this. The `msg` type just describes what kind of\nmessages this process can be sent by strangers.\n\nWe shall see though! This is just a draft that does not cover nearly everything\nit needs to, so the long-term vision for concurrency in Elm will be rolling out\nslowly as I get more data and experience.\n\nI ask that people bullish on compiling to node.js keep this in mind. I think we\ncan do better than the hopelessly bad concurrency model of node.js, and I hope\nthe Elm community will be supportive of being more ambitious, even if it takes\nlonger. That\u2019s kind of what Elm is all about.\n", "aliases": [{"name": "Id", "comment": " A light-weight process that runs concurrently. You can use `spawn` to\nget a bunch of different tasks running in different processes. The Elm runtime\nwill interleave their progress. So if a task is taking too long, we will pause\nit at an `andThen` and switch over to other stuff.\n\n**Note:** We make a distinction between *concurrency* which means interleaving\ndifferent sequences and *parallelism* which means running different\nsequences at the exact same time. For example, a\n[time-sharing system](https://en.wikipedia.org/wiki/Time-sharing) is definitely\nconcurrent, but not necessarily parallel. So even though JS runs within a\nsingle OS-level thread, Elm can still run things concurrently.\n", "args": [], "type": "Platform.ProcessId"}], "types": [], "values": [{"name": "kill", "comment": " Sometimes you `spawn` a process, but later decide it would be a waste to\nhave it keep running and doing stuff. The `kill` function will force a process\nto bail on whatever task it is running. So if there is an HTTP request in\nflight, it will also abort the request.\n", "type": "Process.Id -> Task.Task x ()"}, {"name": "sleep", "comment": " Block progress on the current process for a given amount of time. The\nJavaScript equivalent of this is [`setTimeout`][setTimeout] which lets you\ndelay work until later.\n\n[setTimeout]: https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout\n", "type": "Time.Time -> Task.Task x ()"}, {"name": "spawn", "comment": " Run a task in its own light-weight process. In the following example,\n`task1` and `task2` will be interleaved. If `task1` makes a long HTTP request\nor is just taking a long time, we can hop over to `task2` and do some work\nthere.\n\n    spawn task1\n      |> Task.andThen (\\_ -> spawn task2)\n\n**Note:** This creates a relatively restricted kind of `Process` because it\ncannot receive any messages. More flexibility for user-defined processes will\ncome in a later release!\n", "type": "Task.Task x a -> Task.Task y Process.Id"}], "generated-with-elm-version": "0.18.0"}, {"name": "Json.Decode", "comment": " Turn JSON values into Elm values. Definitely check out this [intro to\nJSON decoders][guide] to get a feel for how this library works!\n\n[guide]: https://guide.elm-lang.org/interop/json.html\n\n# Primitives\n@docs Decoder, string, bool, int, float\n\n# Data Structures\n@docs nullable, list, array, dict, keyValuePairs\n\n# Object Primitives\n@docs field, at, index\n\n# Inconsistent Structure\n@docs maybe, oneOf\n\n# Run Decoders\n@docs decodeString, decodeValue, Value\n\n# Mapping\n\n**Note:** If you run out of map functions, take a look at [elm-decode-pipeline][pipe]\nwhich makes it easier to handle large objects, but produces lower quality type\nerrors.\n\n[pipe]: http://package.elm-lang.org/packages/NoRedInk/elm-decode-pipeline/latest\n\n@docs map, map2, map3, map4, map5, map6, map7, map8\n\n# Fancy Decoding\n@docs lazy, value, null, succeed, fail, andThen\n", "aliases": [{"name": "Value", "comment": " A JSON value.\n", "args": [], "type": "Json.Encode.Value"}], "types": [{"name": "Decoder", "comment": " A value that knows how to decode JSON values.\n", "args": ["a"], "cases": []}], "values": [{"name": "andThen", "comment": " Create decoders that depend on previous results. If you are creating\nversioned data, you might do something like this:\n\n    info : Decoder Info\n    info =\n      field \"version\" int\n        |> andThen infoHelp\n\n    infoHelp : Int -> Decoder Info\n    infoHelp version =\n      case version of\n        4 ->\n          infoDecoder4\n\n        3 ->\n          infoDecoder3\n\n        _ ->\n          fail <|\n            \"Trying to decode info, but version \"\n            ++ toString version ++ \" is not supported.\"\n\n    -- infoDecoder4 : Decoder Info\n    -- infoDecoder3 : Decoder Info\n", "type": "(a -> Json.Decode.Decoder b) -> Json.Decode.Decoder a -> Json.Decode.Decoder b"}, {"name": "array", "comment": " Decode a JSON array into an Elm `Array`.\n\n    decodeString (array int) \"[1,2,3]\"       == Ok (Array.fromList [1,2,3])\n    decodeString (array bool) \"[true,false]\" == Ok (Array.fromList [True,False])\n", "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Array.Array a)"}, {"name": "at", "comment": " Decode a nested JSON object, requiring certain fields.\n\n    json = \"\"\"{ \"person\": { \"name\": \"tom\", \"age\": 42 } }\"\"\"\n\n    decodeString (at [\"person\", \"name\"] string) json  == Ok \"tom\"\n    decodeString (at [\"person\", \"age\" ] int   ) json  == Ok \"42\n\nThis is really just a shorthand for saying things like:\n\n    field \"person\" (field \"name\" string) == at [\"person\",\"name\"] string\n", "type": "List String -> Json.Decode.Decoder a -> Json.Decode.Decoder a"}, {"name": "bool", "comment": " Decode a JSON boolean into an Elm `Bool`.\n\n    decodeString bool \"true\"              == Ok True\n    decodeString bool \"42\"                == Err ...\n    decodeString bool \"3.14\"              == Err ...\n    decodeString bool \"\\\"hello\\\"\"         == Err ...\n    decodeString bool \"{ \\\"hello\\\": 42 }\" == Err ...\n", "type": "Json.Decode.Decoder Bool"}, {"name": "decodeString", "comment": " Parse the given string into a JSON value and then run the `Decoder` on it.\nThis will fail if the string is not well-formed JSON or if the `Decoder`\nfails for some reason.\n\n    decodeString int \"4\"     == Ok 4\n    decodeString int \"1 + 2\" == Err ...\n", "type": "Json.Decode.Decoder a -> String -> Result.Result String a"}, {"name": "decodeValue", "comment": " Run a `Decoder` on some JSON `Value`. You can send these JSON values\nthrough ports, so that is probably the main time you would use this function.\n", "type": "Json.Decode.Decoder a -> Json.Decode.Value -> Result.Result String a"}, {"name": "dict", "comment": " Decode a JSON object into an Elm `Dict`.\n\n    decodeString (dict int) \"{ \\\"alice\\\": 42, \\\"bob\\\": 99 }\"\n      == Dict.fromList [(\"alice\", 42), (\"bob\", 99)]\n", "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Dict.Dict String a)"}, {"name": "fail", "comment": " Ignore the JSON and make the decoder fail. This is handy when used with\n`oneOf` or `andThen` where you want to give a custom error message in some\ncase.\n\nSee the [`andThen`](#andThen) docs for an example.\n", "type": "String -> Json.Decode.Decoder a"}, {"name": "field", "comment": " Decode a JSON object, requiring a particular field.\n\n    decodeString (field \"x\" int) \"{ \\\"x\\\": 3 }\"            == Ok 3\n    decodeString (field \"x\" int) \"{ \\\"x\\\": 3, \\\"y\\\": 4 }\"  == Ok 3\n    decodeString (field \"x\" int) \"{ \\\"x\\\": true }\"         == Err ...\n    decodeString (field \"x\" int) \"{ \\\"y\\\": 4 }\"            == Err ...\n\n    decodeString (field \"name\" string) \"{ \\\"name\\\": \\\"tom\\\" }\" == Ok \"tom\"\n\nThe object *can* have other fields. Lots of them! The only thing this decoder\ncares about is if `x` is present and that the value there is an `Int`.\n\nCheck out [`map2`](#map2) to see how to decode multiple fields!\n", "type": "String -> Json.Decode.Decoder a -> Json.Decode.Decoder a"}, {"name": "float", "comment": " Decode a JSON number into an Elm `Float`.\n\n    decodeString float \"true\"              == Err ..\n    decodeString float \"42\"                == Ok 42\n    decodeString float \"3.14\"              == Ok 3.14\n    decodeString float \"\\\"hello\\\"\"         == Err ...\n    decodeString float \"{ \\\"hello\\\": 42 }\" == Err ...\n", "type": "Json.Decode.Decoder Float"}, {"name": "index", "comment": " Decode a JSON array, requiring a particular index.\n\n    json = \"\"\"[ \"alice\", \"bob\", \"chuck\" ]\"\"\"\n\n    decodeString (index 0 string) json  == Ok \"alice\"\n    decodeString (index 1 string) json  == Ok \"bob\"\n    decodeString (index 2 string) json  == Ok \"chuck\"\n    decodeString (index 3 string) json  == Err ...\n", "type": "Int -> Json.Decode.Decoder a -> Json.Decode.Decoder a"}, {"name": "int", "comment": " Decode a JSON number into an Elm `Int`.\n\n    decodeString int \"true\"              == Err ...\n    decodeString int \"42\"                == Ok 42\n    decodeString int \"3.14\"              == Err ...\n    decodeString int \"\\\"hello\\\"\"         == Err ...\n    decodeString int \"{ \\\"hello\\\": 42 }\" == Err ...\n", "type": "Json.Decode.Decoder Int"}, {"name": "keyValuePairs", "comment": " Decode a JSON object into an Elm `List` of pairs.\n\n    decodeString (keyValuePairs int) \"{ \\\"alice\\\": 42, \\\"bob\\\": 99 }\"\n      == [(\"alice\", 42), (\"bob\", 99)]\n", "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (List ( String, a ))"}, {"name": "lazy", "comment": " Sometimes you have JSON with recursive structure, like nested comments.\nYou can use `lazy` to make sure your decoder unrolls lazily.\n\n    type alias Comment =\n      { message : String\n      , responses : Responses\n      }\n\n    type Responses = Responses (List Comment)\n\n    comment : Decoder Comment\n    comment =\n      map2 Comment\n        (field \"message\" string)\n        (field \"responses\" (map Responses (list (lazy (\\_ -> comment)))))\n\nIf we had said `list comment` instead, we would start expanding the value\ninfinitely. What is a `comment`? It is a decoder for objects where the\n`responses` field contains comments. What is a `comment` though? Etc.\n\nBy using `list (lazy (\\_ -> comment))` we make sure the decoder only expands\nto be as deep as the JSON we are given. You can read more about recursive data\nstructures [here][].\n\n[here]: https://github.com/elm-lang/elm-compiler/blob/master/hints/recursive-alias.md\n", "type": "(() -> Json.Decode.Decoder a) -> Json.Decode.Decoder a"}, {"name": "list", "comment": " Decode a JSON array into an Elm `List`.\n\n    decodeString (list int) \"[1,2,3]\"       == Ok [1,2,3]\n    decodeString (list bool) \"[true,false]\" == Ok [True,False]\n", "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (List a)"}, {"name": "map", "comment": " Transform a decoder. Maybe you just want to know the length of a string:\n\n    import String\n\n    stringLength : Decoder Int\n    stringLength =\n      map String.length string\n\nIt is often helpful to use `map` with `oneOf`, like when defining `nullable`:\n\n    nullable : Decoder a -> Decoder (Maybe a)\n    nullable decoder =\n      oneOf\n        [ null Nothing\n        , map Just decoder\n        ]\n", "type": "(a -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder value"}, {"name": "map2", "comment": " Try two decoders and then combine the result. We can use this to decode\nobjects with many fields:\n\n    type alias Point = { x : Float, y : Float }\n\n    point : Decoder Point\n    point =\n      map2 Point\n        (field \"x\" float)\n        (field \"y\" float)\n\n    -- decodeString point \"\"\"{ \"x\": 3, \"y\": 4 }\"\"\" == Ok { x = 3, y = 4 }\n\nIt tries each individual decoder and puts the result together with the `Point`\nconstructor.\n", "type": "(a -> b -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder value"}, {"name": "map3", "comment": " Try three decoders and then combine the result. We can use this to decode\nobjects with many fields:\n\n    type alias Person = { name : String, age : Int, height : Float }\n\n    person : Decoder Person\n    person =\n      map3 Person\n        (at [\"name\"] string)\n        (at [\"info\",\"age\"] int)\n        (at [\"info\",\"height\"] float)\n\n    -- json = \"\"\"{ \"name\": \"tom\", \"info\": { \"age\": 42, \"height\": 1.8 } }\"\"\"\n    -- decodeString person json == Ok { name = \"tom\", age = 42, height = 1.8 }\n\nLike `map2` it tries each decoder in order and then give the results to the\n`Person` constructor. That can be any function though!\n", "type": "(a -> b -> c -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder value"}, {"name": "map4", "comment": "", "type": "(a -> b -> c -> d -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder value"}, {"name": "map5", "comment": "", "type": "(a -> b -> c -> d -> e -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder value"}, {"name": "map6", "comment": "", "type": "(a -> b -> c -> d -> e -> f -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder f -> Json.Decode.Decoder value"}, {"name": "map7", "comment": "", "type": "(a -> b -> c -> d -> e -> f -> g -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder f -> Json.Decode.Decoder g -> Json.Decode.Decoder value"}, {"name": "map8", "comment": "", "type": "(a -> b -> c -> d -> e -> f -> g -> h -> value) -> Json.Decode.Decoder a -> Json.Decode.Decoder b -> Json.Decode.Decoder c -> Json.Decode.Decoder d -> Json.Decode.Decoder e -> Json.Decode.Decoder f -> Json.Decode.Decoder g -> Json.Decode.Decoder h -> Json.Decode.Decoder value"}, {"name": "maybe", "comment": " Helpful for dealing with optional fields. Here are a few slightly different\nexamples:\n\n    json = \"\"\"{ \"name\": \"tom\", \"age\": 42 }\"\"\"\n\n    decodeString (maybe (field \"age\"    int  )) json == Ok (Just 42)\n    decodeString (maybe (field \"name\"   int  )) json == Ok Nothing\n    decodeString (maybe (field \"height\" float)) json == Ok Nothing\n\n    decodeString (field \"age\"    (maybe int  )) json == Ok (Just 42)\n    decodeString (field \"name\"   (maybe int  )) json == Ok Nothing\n    decodeString (field \"height\" (maybe float)) json == Err ...\n\nNotice the last example! It is saying we *must* have a field named `height` and\nthe content *may* be a float. There is no `height` field, so the decoder fails.\n\nPoint is, `maybe` will make exactly what it contains conditional. For optional\nfields, this means you probably want it *outside* a use of `field` or `at`.\n", "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe.Maybe a)"}, {"name": "null", "comment": " Decode a `null` value into some Elm value.\n\n    decodeString (null False) \"null\" == Ok False\n    decodeString (null 42) \"null\"    == Ok 42\n    decodeString (null 42) \"42\"      == Err ..\n    decodeString (null 42) \"false\"   == Err ..\n\nSo if you ever see a `null`, this will return whatever value you specified.\n", "type": "a -> Json.Decode.Decoder a"}, {"name": "nullable", "comment": " Decode a nullable JSON value into an Elm value.\n\n    decodeString (nullable int) \"13\"    == Ok (Just 13)\n    decodeString (nullable int) \"42\"    == Ok (Just 42)\n    decodeString (nullable int) \"null\"  == Ok Nothing\n    decodeString (nullable int) \"true\"  == Err ..\n", "type": "Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe.Maybe a)"}, {"name": "oneOf", "comment": " Try a bunch of different decoders. This can be useful if the JSON may come\nin a couple different formats. For example, say you want to read an array of\nnumbers, but some of them are `null`.\n\n    import String\n\n    badInt : Decoder Int\n    badInt =\n      oneOf [ int, null 0 ]\n\n    -- decodeString (list badInt) \"[1,2,null,4]\" == Ok [1,2,0,4]\n\nWhy would someone generate JSON like this? Questions like this are not good\nfor your health. The point is that you can use `oneOf` to handle situations\nlike this!\n\nYou could also use `oneOf` to help version your data. Try the latest format,\nthen a few older ones that you still support. You could use `andThen` to be\neven more particular if you wanted.\n", "type": "List (Json.Decode.Decoder a) -> Json.Decode.Decoder a"}, {"name": "string", "comment": " Decode a JSON string into an Elm `String`.\n\n    decodeString string \"true\"              == Err ...\n    decodeString string \"42\"                == Err ...\n    decodeString string \"3.14\"              == Err ...\n    decodeString string \"\\\"hello\\\"\"         == Ok \"hello\"\n    decodeString string \"{ \\\"hello\\\": 42 }\" == Err ...\n", "type": "Json.Decode.Decoder String"}, {"name": "succeed", "comment": " Ignore the JSON and produce a certain Elm value.\n\n    decodeString (succeed 42) \"true\"    == Ok 42\n    decodeString (succeed 42) \"[1,2,3]\" == Ok 42\n    decodeString (succeed 42) \"hello\"   == Err ... -- this is not a valid JSON string\n\nThis is handy when used with `oneOf` or `andThen`.\n", "type": "a -> Json.Decode.Decoder a"}, {"name": "value", "comment": " Do not do anything with a JSON value, just bring it into Elm as a `Value`.\nThis can be useful if you have particularly crazy data that you would like to\ndeal with later. Or if you are going to send it out a port and do not care\nabout its structure.\n", "type": "Json.Decode.Decoder Json.Decode.Value"}], "generated-with-elm-version": "0.18.0"}, {"name": "Time", "comment": " Library for working with time.\n\n# Time\n@docs Time, now, every\n\n# Units\n@docs millisecond, second, minute, hour,\n  inMilliseconds, inSeconds, inMinutes, inHours\n\n", "aliases": [{"name": "Time", "comment": " Type alias to make it clearer when you are working with time values.\nUsing the `Time` helpers like `second` and `inSeconds` instead of raw numbers\nis very highly recommended.\n", "args": [], "type": "Float"}], "types": [], "values": [{"name": "every", "comment": " Subscribe to the current time. First you provide an interval describing how\nfrequently you want updates. Second, you give a tagger that turns a time into a\nmessage for your `update` function. So if you want to hear about the current\ntime every second, you would say something like this:\n\n    type Msg = Tick Time | ...\n\n    subscriptions model =\n      every second Tick\n\nCheck out the [Elm Architecture Tutorial][arch] for more info on how\nsubscriptions work.\n\n[arch]: https://github.com/evancz/elm-architecture-tutorial/\n\n**Note:** this function is not for animation! You need to use something based\non `requestAnimationFrame` to get smooth animations. This is based on\n`setInterval` which is better for recurring tasks like \u201ccheck on something\nevery 30 seconds\u201d.\n", "type": "Time.Time -> (Time.Time -> msg) -> Platform.Sub.Sub msg"}, {"name": "hour", "comment": "", "type": "Time.Time"}, {"name": "inHours", "comment": "", "type": "Time.Time -> Float"}, {"name": "inMilliseconds", "comment": "", "type": "Time.Time -> Float"}, {"name": "inMinutes", "comment": "", "type": "Time.Time -> Float"}, {"name": "inSeconds", "comment": "", "type": "Time.Time -> Float"}, {"name": "millisecond", "comment": " Units of time, making it easier to specify things like a half-second\n`(500 * millisecond)` without remembering Elm&rsquo;s underlying units of time.\n", "type": "Time.Time"}, {"name": "minute", "comment": "", "type": "Time.Time"}, {"name": "now", "comment": " Get the `Time` at the moment when this task is run.\n", "type": "Task.Task x Time.Time"}, {"name": "second", "comment": "", "type": "Time.Time"}], "generated-with-elm-version": "0.18.0"}, {"name": "Set", "comment": " A set of unique values. The values can be any comparable type. This\nincludes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or lists\nof comparable types.\n\nInsert, remove, and query operations all take *O(log n)* time.\n\n# Sets\n@docs Set\n\n# Build\n@docs empty, singleton, insert, remove\n\n# Query\n@docs isEmpty, member, size\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n", "aliases": [], "types": [{"name": "Set", "comment": " Represents a set of unique values. So `(Set Int)` is a set of integers and\n`(Set String)` is a set of strings.\n", "args": ["t"], "cases": []}], "values": [{"name": "diff", "comment": " Get the difference between the first set and the second. Keeps values\nthat do not appear in the second set.\n", "type": "Set.Set comparable -> Set.Set comparable -> Set.Set comparable"}, {"name": "empty", "comment": " Create an empty set.\n", "type": "Set.Set a"}, {"name": "filter", "comment": " Create a new set consisting only of elements which satisfy a predicate.\n", "type": "(comparable -> Bool) -> Set.Set comparable -> Set.Set comparable"}, {"name": "foldl", "comment": " Fold over the values in a set, in order from lowest to highest.\n", "type": "(comparable -> b -> b) -> b -> Set.Set comparable -> b"}, {"name": "foldr", "comment": " Fold over the values in a set, in order from highest to lowest.\n", "type": "(comparable -> b -> b) -> b -> Set.Set comparable -> b"}, {"name": "fromList", "comment": " Convert a list into a set, removing any duplicates.\n", "type": "List comparable -> Set.Set comparable"}, {"name": "insert", "comment": " Insert a value into a set.\n", "type": "comparable -> Set.Set comparable -> Set.Set comparable"}, {"name": "intersect", "comment": " Get the intersection of two sets. Keeps values that appear in both sets.\n", "type": "Set.Set comparable -> Set.Set comparable -> Set.Set comparable"}, {"name": "isEmpty", "comment": " Determine if a set is empty.\n", "type": "Set.Set a -> Bool"}, {"name": "map", "comment": " Map a function onto a set, creating a new set with no duplicates.\n", "type": "(comparable -> comparable2) -> Set.Set comparable -> Set.Set comparable2"}, {"name": "member", "comment": " Determine if a value is in a set.\n", "type": "comparable -> Set.Set comparable -> Bool"}, {"name": "partition", "comment": " Create two new sets; the first consisting of elements which satisfy a\npredicate, the second consisting of elements which do not.\n", "type": "(comparable -> Bool) -> Set.Set comparable -> ( Set.Set comparable, Set.Set comparable )"}, {"name": "remove", "comment": " Remove a value from a set. If the value is not found, no changes are made.\n", "type": "comparable -> Set.Set comparable -> Set.Set comparable"}, {"name": "singleton", "comment": " Create a set with one value.\n", "type": "comparable -> Set.Set comparable"}, {"name": "size", "comment": " Determine the number of elements in a set.\n", "type": "Set.Set a -> Int"}, {"name": "toList", "comment": " Convert a set into a list, sorted from lowest to highest.\n", "type": "Set.Set comparable -> List comparable"}, {"name": "union", "comment": " Get the union of two sets. Keep all values.\n", "type": "Set.Set comparable -> Set.Set comparable -> Set.Set comparable"}], "generated-with-elm-version": "0.18.0"}, {"name": "Json.Encode", "comment": " Library for turning Elm values into Json values.\n\n# Encoding\n@docs encode, Value\n\n# Primitives\n@docs string, int, float, bool, null\n\n# Arrays\n@docs list, array\n\n# Objects\n@docs object\n", "aliases": [], "types": [{"name": "Value", "comment": " Represents a JavaScript value.\n", "args": [], "cases": []}], "values": [{"name": "array", "comment": "", "type": "Array.Array Json.Encode.Value -> Json.Encode.Value"}, {"name": "bool", "comment": "", "type": "Bool -> Json.Encode.Value"}, {"name": "encode", "comment": " Convert a `Value` into a prettified string. The first argument specifies\nthe amount of indentation in the resulting string.\n\n    person =\n        object\n          [ (\"name\", string \"Tom\")\n          , (\"age\", int 42)\n          ]\n\n    compact = encode 0 person\n    -- {\"name\":\"Tom\",\"age\":42}\n\n    readable = encode 4 person\n    -- {\n    --     \"name\": \"Tom\",\n    --     \"age\": 42\n    -- }\n", "type": "Int -> Json.Encode.Value -> String"}, {"name": "float", "comment": " Encode a Float. `Infinity` and `NaN` are encoded as `null`.\n", "type": "Float -> Json.Encode.Value"}, {"name": "int", "comment": "", "type": "Int -> Json.Encode.Value"}, {"name": "list", "comment": "", "type": "List Json.Encode.Value -> Json.Encode.Value"}, {"name": "null", "comment": "", "type": "Json.Encode.Value"}, {"name": "object", "comment": "", "type": "List ( String, Json.Encode.Value ) -> Json.Encode.Value"}, {"name": "string", "comment": "", "type": "String -> Json.Encode.Value"}], "generated-with-elm-version": "0.18.0"}, {"name": "Dict", "comment": " A dictionary mapping unique keys to values. The keys can be any comparable\ntype. This includes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or\nlists of comparable types.\n\nInsert, remove, and query operations all take *O(log n)* time.\n\n# Dictionaries\n@docs Dict\n\n# Build\n@docs empty, singleton, insert, update, remove\n\n# Query\n@docs isEmpty, member, get, size\n\n# Lists\n@docs keys, values, toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n# Combine\n@docs union, intersect, diff, merge\n\n", "aliases": [], "types": [{"name": "Dict", "comment": " A dictionary of keys and values. So a `(Dict String User)` is a dictionary\nthat lets you look up a `String` (such as user names) and find the associated\n`User`.\n", "args": ["k", "v"], "cases": []}], "values": [{"name": "diff", "comment": " Keep a key-value pair when its key does not appear in the second dictionary.\n", "type": "Dict.Dict comparable v -> Dict.Dict comparable v -> Dict.Dict comparable v"}, {"name": "empty", "comment": " Create an empty dictionary. ", "type": "Dict.Dict k v"}, {"name": "filter", "comment": " Keep a key-value pair when it satisfies a predicate. ", "type": "(comparable -> v -> Bool) -> Dict.Dict comparable v -> Dict.Dict comparable v"}, {"name": "foldl", "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key.\n", "type": "(comparable -> v -> b -> b) -> b -> Dict.Dict comparable v -> b"}, {"name": "foldr", "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key.\n", "type": "(comparable -> v -> b -> b) -> b -> Dict.Dict comparable v -> b"}, {"name": "fromList", "comment": " Convert an association list into a dictionary. ", "type": "List ( comparable, v ) -> Dict.Dict comparable v"}, {"name": "get", "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary.\n\n    animals = fromList [ (\"Tom\", Cat), (\"Jerry\", Mouse) ]\n\n    get \"Tom\"   animals == Just Cat\n    get \"Jerry\" animals == Just Mouse\n    get \"Spike\" animals == Nothing\n\n", "type": "comparable -> Dict.Dict comparable v -> Maybe.Maybe v"}, {"name": "insert", "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision. ", "type": "comparable -> v -> Dict.Dict comparable v -> Dict.Dict comparable v"}, {"name": "intersect", "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary.\n", "type": "Dict.Dict comparable v -> Dict.Dict comparable v -> Dict.Dict comparable v"}, {"name": "isEmpty", "comment": " Determine if a dictionary is empty.\n\n    isEmpty empty == True\n", "type": "Dict.Dict k v -> Bool"}, {"name": "keys", "comment": " Get all of the keys in a dictionary, sorted from lowest to highest.\n\n    keys (fromList [(0,\"Alice\"),(1,\"Bob\")]) == [0,1]\n", "type": "Dict.Dict comparable v -> List comparable"}, {"name": "map", "comment": " Apply a function to all values in a dictionary.\n", "type": "(comparable -> a -> b) -> Dict.Dict comparable a -> Dict.Dict comparable b"}, {"name": "member", "comment": " Determine if a key is in a dictionary. ", "type": "comparable -> Dict.Dict comparable v -> Bool"}, {"name": "merge", "comment": " The most general way of combining two dictionaries. You provide three\naccumulators for when a given key appears:\n\n  1. Only in the left dictionary.\n  2. In both dictionaries.\n  3. Only in the right dictionary.\n\nYou then traverse all the keys from lowest to highest, building up whatever\nyou want.\n", "type": "(comparable -> a -> result -> result) -> (comparable -> a -> b -> result -> result) -> (comparable -> b -> result -> result) -> Dict.Dict comparable a -> Dict.Dict comparable b -> result -> result"}, {"name": "partition", "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest.\n", "type": "(comparable -> v -> Bool) -> Dict.Dict comparable v -> ( Dict.Dict comparable v, Dict.Dict comparable v )"}, {"name": "remove", "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made. ", "type": "comparable -> Dict.Dict comparable v -> Dict.Dict comparable v"}, {"name": "singleton", "comment": " Create a dictionary with one key-value pair. ", "type": "comparable -> v -> Dict.Dict comparable v"}, {"name": "size", "comment": " Determine the number of key-value pairs in the dictionary. ", "type": "Dict.Dict k v -> Int"}, {"name": "toList", "comment": " Convert a dictionary into an association list of key-value pairs, sorted by keys. ", "type": "Dict.Dict comparable v -> List ( comparable, v )"}, {"name": "union", "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary.\n", "type": "Dict.Dict comparable v -> Dict.Dict comparable v -> Dict.Dict comparable v"}, {"name": "update", "comment": " Update the value of a dictionary for a specific key with a given function. ", "type": "comparable -> (Maybe.Maybe v -> Maybe.Maybe v) -> Dict.Dict comparable v -> Dict.Dict comparable v"}, {"name": "values", "comment": " Get all of the values in a dictionary, in the order of their keys.\n\n    values (fromList [(0,\"Alice\"),(1,\"Bob\")]) == [\"Alice\", \"Bob\"]\n", "type": "Dict.Dict comparable v -> List v"}], "generated-with-elm-version": "0.18.0"}, {"name": "Task", "comment": " Tasks make it easy to describe asynchronous operations that may fail, like\nHTTP requests or writing to a database. For more information, see the [Elm\ndocumentation on Tasks](http://guide.elm-lang.org/error_handling/task.html).\n\n# Basics\n@docs Task, succeed, fail\n\n# Mapping\n@docs map, map2, map3, map4, map5\n\n# Chaining\n@docs andThen, sequence\n\n# Errors\n@docs onError, mapError\n\n# Commands\n@docs perform, attempt\n\n", "aliases": [{"name": "Task", "comment": " Represents asynchronous effects that may fail. It is useful for stuff like\nHTTP.\n\nFor example, maybe we have a task with the type (`Task String User`). This means\nthat when we perform the task, it will either fail with a `String` message or\nsucceed with a `User`. So this could represent a task that is asking a server\nfor a certain user.\n", "args": ["err", "ok"], "type": "Platform.Task err ok"}], "types": [], "values": [{"name": "andThen", "comment": " Chain together a task and a callback. The first task will run, and if it is\nsuccessful, you give the result to the callback resulting in another task. This\ntask then gets run.\n\n    succeed 2\n      |> andThen (\\n -> succeed (n + 2))\n      -- succeed 4\n\nThis is useful for chaining tasks together. Maybe you need to get a user from\nyour servers *and then* lookup their picture once you know their name.\n", "type": "(a -> Task.Task x b) -> Task.Task x a -> Task.Task x b"}, {"name": "attempt", "comment": " Command the Elm runtime to attempt a task that might fail!\n", "type": "(Result.Result x a -> msg) -> Task.Task x a -> Platform.Cmd.Cmd msg"}, {"name": "fail", "comment": " A task that fails immediately when run.\n\n    fail \"file not found\" : Task String a\n", "type": "x -> Task.Task x a"}, {"name": "map", "comment": " Transform a task.\n\n    map sqrt (succeed 9) -- succeed 3\n", "type": "(a -> b) -> Task.Task x a -> Task.Task x b"}, {"name": "map2", "comment": " Put the results of two tasks together. If either task fails, the whole\nthing fails. It also runs in order so the first task will be completely\nfinished before the second task starts.\n\n    map2 (+) (succeed 9) (succeed 3) -- succeed 12\n", "type": "(a -> b -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x result"}, {"name": "map3", "comment": "", "type": "(a -> b -> c -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x c -> Task.Task x result"}, {"name": "map4", "comment": "", "type": "(a -> b -> c -> d -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x c -> Task.Task x d -> Task.Task x result"}, {"name": "map5", "comment": "", "type": "(a -> b -> c -> d -> e -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x c -> Task.Task x d -> Task.Task x e -> Task.Task x result"}, {"name": "mapError", "comment": " Transform the error value. This can be useful if you need a bunch of error\ntypes to match up.\n\n    type Error = Http Http.Error | WebGL WebGL.Error\n\n    getResources : Task Error Resource\n    getResources =\n      sequence [ mapError Http serverTask, mapError WebGL textureTask ]\n", "type": "(x -> y) -> Task.Task x a -> Task.Task y a"}, {"name": "onError", "comment": " Recover from a failure in a task. If the given task fails, we use the\ncallback to recover.\n\n    fail \"file not found\"\n      |> onError (\\msg -> succeed 42)\n      -- succeed 42\n\n    succeed 9\n      |> onError (\\msg -> succeed 42)\n      -- succeed 9\n", "type": "(x -> Task.Task y a) -> Task.Task x a -> Task.Task y a"}, {"name": "perform", "comment": " The only way to *do* things in Elm is to give commands to the Elm runtime.\nSo we describe some complex behavior with a `Task` and then command the runtime\nto `perform` that task. For example, getting the current time looks like this:\n\n    import Task\n    import Time exposing (Time)\n\n    type Msg = Click | NewTime Time\n\n    update : Msg -> Model -> ( Model, Cmd Msg )\n    update msg model =\n      case msg of\n        Click ->\n          ( model, Task.perform NewTime Time.now )\n\n        NewTime time ->\n          ...\n", "type": "(a -> msg) -> Task.Task Basics.Never a -> Platform.Cmd.Cmd msg"}, {"name": "sequence", "comment": " Start with a list of tasks, and turn them into a single task that returns a\nlist. The tasks will be run in order one-by-one and if any task fails the whole\nsequence fails.\n\n    sequence [ succeed 1, succeed 2 ] -- succeed [ 1, 2 ]\n\nThis can be useful if you need to make a bunch of HTTP requests one-by-one.\n", "type": "List (Task.Task x a) -> Task.Task x (List a)"}, {"name": "succeed", "comment": " A task that succeeds immediately when run.\n\n    succeed 42    -- results in 42\n", "type": "a -> Task.Task x a"}], "generated-with-elm-version": "0.18.0"}, {"name": "Array", "comment": " A library for fast immutable arrays. The elements in an array must have the\nsame type. The arrays are implemented in Relaxed Radix Balanced-Trees for fast\nreads, updates, and appends.\n\n# Arrays\n@docs Array\n\n# Creating Arrays\n@docs empty, repeat, initialize, fromList\n\n# Basics\n@docs isEmpty, length, push, append\n\n# Get and Set\n@docs get, set\n\n# Taking Arrays Apart\n@docs slice, toList, toIndexedList\n\n# Mapping, Filtering, and Folding\n@docs map, indexedMap, filter, foldl, foldr\n", "aliases": [], "types": [{"name": "Array", "comment": " Representation of fast immutable arrays. You can create arrays of integers\n(`Array Int`) or strings (`Array String`) or any other type of value you can\ndream up.\n", "args": ["a"], "cases": []}], "values": [{"name": "append", "comment": " Append two arrays to a new one.\n\n    append (repeat 2 42) (repeat 3 81) == fromList [42,42,81,81,81]\n", "type": "Array.Array a -> Array.Array a -> Array.Array a"}, {"name": "empty", "comment": " Return an empty array.\n\n    length empty == 0\n", "type": "Array.Array a"}, {"name": "filter", "comment": " Keep only elements that satisfy the predicate:\n\n    filter isEven (fromList [1,2,3,4,5,6]) == (fromList [2,4,6])\n", "type": "(a -> Bool) -> Array.Array a -> Array.Array a"}, {"name": "foldl", "comment": " Reduce an array from the left. Read `foldl` as &ldquo;fold from the left&rdquo;.\n\n    foldl (::) [] (fromList [1,2,3]) == [3,2,1]\n", "type": "(a -> b -> b) -> b -> Array.Array a -> b"}, {"name": "foldr", "comment": " Reduce an array from the right. Read `foldr` as &ldquo;fold from the right&rdquo;.\n\n    foldr (+) 0 (repeat 3 5) == 15\n", "type": "(a -> b -> b) -> b -> Array.Array a -> b"}, {"name": "fromList", "comment": " Create an array from a list.\n", "type": "List a -> Array.Array a"}, {"name": "get", "comment": " Return Just the element at the index or Nothing if the index is out of range.\n\n    get  0 (fromList [0,5,3]) == Just 0\n    get  2 (fromList [0,5,3]) == Just 3\n    get  5 (fromList [0,5,3]) == Nothing\n    get -1 (fromList [0,5,3]) == Nothing\n\n", "type": "Int -> Array.Array a -> Maybe.Maybe a"}, {"name": "indexedMap", "comment": " Apply a function on every element with its index as first argument.\n\n    indexedMap (*) (fromList [5,5,5]) == fromList [0,5,10]\n", "type": "(Int -> a -> b) -> Array.Array a -> Array.Array b"}, {"name": "initialize", "comment": " Initialize an array. `initialize n f` creates an array of length `n` with\nthe element at index `i` initialized to the result of `(f i)`.\n\n    initialize 4 identity    == fromList [0,1,2,3]\n    initialize 4 (\\n -> n*n) == fromList [0,1,4,9]\n    initialize 4 (always 0)  == fromList [0,0,0,0]\n", "type": "Int -> (Int -> a) -> Array.Array a"}, {"name": "isEmpty", "comment": " Determine if an array is empty.\n\n    isEmpty empty == True\n", "type": "Array.Array a -> Bool"}, {"name": "length", "comment": " Return the length of an array.\n\n    length (fromList [1,2,3]) == 3\n", "type": "Array.Array a -> Int"}, {"name": "map", "comment": " Apply a function on every element in an array.\n\n    map sqrt (fromList [1,4,9]) == fromList [1,2,3]\n", "type": "(a -> b) -> Array.Array a -> Array.Array b"}, {"name": "push", "comment": " Push an element to the end of an array.\n\n    push 3 (fromList [1,2]) == fromList [1,2,3]\n", "type": "a -> Array.Array a -> Array.Array a"}, {"name": "repeat", "comment": " Creates an array with a given length, filled with a default element.\n\n    repeat 5 0     == fromList [0,0,0,0,0]\n    repeat 3 \"cat\" == fromList [\"cat\",\"cat\",\"cat\"]\n\nNotice that `repeat 3 x` is the same as `initialize 3 (always x)`.\n", "type": "Int -> a -> Array.Array a"}, {"name": "set", "comment": " Set the element at a particular index. Returns an updated array.\nIf the index is out of range, the array is unaltered.\n\n    set 1 7 (fromList [1,2,3]) == fromList [1,7,3]\n", "type": "Int -> a -> Array.Array a -> Array.Array a"}, {"name": "slice", "comment": " Get a sub-section of an array: `(slice start end array)`. The `start` is a\nzero-based index where we will start our slice. The `end` is a zero-based index\nthat indicates the end of the slice. The slice extracts up to but not including\n`end`.\n\n    slice  0  3 (fromList [0,1,2,3,4]) == fromList [0,1,2]\n    slice  1  4 (fromList [0,1,2,3,4]) == fromList [1,2,3]\n\nBoth the `start` and `end` indexes can be negative, indicating an offset from\nthe end of the array.\n\n    slice  1 -1 (fromList [0,1,2,3,4]) == fromList [1,2,3]\n    slice -2  5 (fromList [0,1,2,3,4]) == fromList [3,4]\n\nThis makes it pretty easy to `pop` the last element off of an array: `slice 0 -1 array`\n", "type": "Int -> Int -> Array.Array a -> Array.Array a"}, {"name": "toIndexedList", "comment": " Create an indexed list from an array. Each element of the array will be\npaired with its index.\n\n    toIndexedList (fromList [\"cat\",\"dog\"]) == [(0,\"cat\"), (1,\"dog\")]\n", "type": "Array.Array a -> List ( Int, a )"}, {"name": "toList", "comment": " Create a list of elements from an array.\n\n    toList (fromList [3,5,8]) == [3,5,8]\n", "type": "Array.Array a -> List a"}], "generated-with-elm-version": "0.18.0"}, {"name": "String", "comment": " A built-in representation for efficient string manipulation. String literals\nare enclosed in `\"double quotes\"`. Strings are *not* lists of characters.\n\n# Basics\n@docs isEmpty, length, reverse, repeat\n\n# Building and Splitting\n@docs cons, uncons, fromChar, append, concat, split, join, words, lines\n\n# Get Substrings\n@docs slice, left, right, dropLeft, dropRight\n\n# Check for Substrings\n@docs contains, startsWith, endsWith, indexes, indices\n\n# Conversions\n@docs toInt, toFloat, toList, fromList\n\n# Formatting\nCosmetic operations such as padding with extra characters or trimming whitespace.\n\n@docs toUpper, toLower,\n      pad, padLeft, padRight,\n      trim, trimLeft, trimRight\n\n# Higher-Order Functions\n@docs map, filter, foldl, foldr, any, all\n", "aliases": [], "types": [], "values": [{"name": "all", "comment": " Determine whether *all* characters satisfy a predicate.\n\n    all isDigit \"90210\" == True\n    all isDigit \"R2-D2\" == False\n    all isDigit \"heart\" == False\n", "type": "(Char -> Bool) -> String -> Bool"}, {"name": "any", "comment": " Determine whether *any* characters satisfy a predicate.\n\n    any isDigit \"90210\" == True\n    any isDigit \"R2-D2\" == True\n    any isDigit \"heart\" == False\n", "type": "(Char -> Bool) -> String -> Bool"}, {"name": "append", "comment": " Append two strings. You can also use [the `(++)` operator](Basics#++)\nto do this.\n\n    append \"butter\" \"fly\" == \"butterfly\"\n", "type": "String -> String -> String"}, {"name": "concat", "comment": " Concatenate many strings into one.\n\n    concat [\"never\",\"the\",\"less\"] == \"nevertheless\"\n", "type": "List String -> String"}, {"name": "cons", "comment": " Add a character to the beginning of a string.\n\n    cons 'T' \"he truth is out there\" == \"The truth is out there\"\n", "type": "Char -> String -> String"}, {"name": "contains", "comment": " See if the second string contains the first one.\n\n    contains \"the\" \"theory\" == True\n    contains \"hat\" \"theory\" == False\n    contains \"THE\" \"theory\" == False\n\nUse [`Regex.contains`](Regex#contains) if you need something more flexible.\n", "type": "String -> String -> Bool"}, {"name": "dropLeft", "comment": " Drop *n* characters from the left side of a string.\n\n    dropLeft 2 \"The Lone Gunmen\" == \"e Lone Gunmen\"\n", "type": "Int -> String -> String"}, {"name": "dropRight", "comment": " Drop *n* characters from the right side of a string.\n\n    dropRight 2 \"Cigarette Smoking Man\" == \"Cigarette Smoking M\"\n", "type": "Int -> String -> String"}, {"name": "endsWith", "comment": " See if the second string ends with the first one.\n\n    endsWith \"the\" \"theory\" == False\n    endsWith \"ory\" \"theory\" == True\n", "type": "String -> String -> Bool"}, {"name": "filter", "comment": " Keep only the characters that satisfy the predicate.\n\n    filter isDigit \"R2-D2\" == \"22\"\n", "type": "(Char -> Bool) -> String -> String"}, {"name": "foldl", "comment": " Reduce a string from the left.\n\n    foldl cons \"\" \"time\" == \"emit\"\n", "type": "(Char -> b -> b) -> b -> String -> b"}, {"name": "foldr", "comment": " Reduce a string from the right.\n\n    foldr cons \"\" \"time\" == \"time\"\n", "type": "(Char -> b -> b) -> b -> String -> b"}, {"name": "fromChar", "comment": " Create a string from a given character.\n\n    fromChar 'a' == \"a\"\n", "type": "Char -> String"}, {"name": "fromList", "comment": " Convert a list of characters into a String. Can be useful if you\nwant to create a string primarily by consing, perhaps for decoding\nsomething.\n\n    fromList ['a','b','c'] == \"abc\"\n", "type": "List Char -> String"}, {"name": "indexes", "comment": " Get all of the indexes for a substring in another string.\n\n    indexes \"i\" \"Mississippi\"   == [1,4,7,10]\n    indexes \"ss\" \"Mississippi\"  == [2,5]\n    indexes \"needle\" \"haystack\" == []\n", "type": "String -> String -> List Int"}, {"name": "indices", "comment": " Alias for `indexes`. ", "type": "String -> String -> List Int"}, {"name": "isEmpty", "comment": " Determine if a string is empty.\n\n    isEmpty \"\" == True\n    isEmpty \"the world\" == False\n", "type": "String -> Bool"}, {"name": "join", "comment": " Put many strings together with a given separator.\n\n    join \"a\" [\"H\",\"w\",\"ii\",\"n\"]        == \"Hawaiian\"\n    join \" \" [\"cat\",\"dog\",\"cow\"]       == \"cat dog cow\"\n    join \"/\" [\"home\",\"evan\",\"Desktop\"] == \"home/evan/Desktop\"\n", "type": "String -> List String -> String"}, {"name": "left", "comment": " Take *n* characters from the left side of a string.\n\n    left 2 \"Mulder\" == \"Mu\"\n", "type": "Int -> String -> String"}, {"name": "length", "comment": " Get the length of a string.\n\n    length \"innumerable\" == 11\n    length \"\" == 0\n\n", "type": "String -> Int"}, {"name": "lines", "comment": " Break a string into lines, splitting on newlines.\n\n    lines \"How are you?\\nGood?\" == [\"How are you?\", \"Good?\"]\n", "type": "String -> List String"}, {"name": "map", "comment": " Transform every character in a string\n\n    map (\\c -> if c == '/' then '.' else c) \"a/b/c\" == \"a.b.c\"\n", "type": "(Char -> Char) -> String -> String"}, {"name": "pad", "comment": " Pad a string on both sides until it has a given length.\n\n    pad 5 ' ' \"1\"   == \"  1  \"\n    pad 5 ' ' \"11\"  == \"  11 \"\n    pad 5 ' ' \"121\" == \" 121 \"\n", "type": "Int -> Char -> String -> String"}, {"name": "padLeft", "comment": " Pad a string on the left until it has a given length.\n\n    padLeft 5 '.' \"1\"   == \"....1\"\n    padLeft 5 '.' \"11\"  == \"...11\"\n    padLeft 5 '.' \"121\" == \"..121\"\n", "type": "Int -> Char -> String -> String"}, {"name": "padRight", "comment": " Pad a string on the right until it has a given length.\n\n    padRight 5 '.' \"1\"   == \"1....\"\n    padRight 5 '.' \"11\"  == \"11...\"\n    padRight 5 '.' \"121\" == \"121..\"\n", "type": "Int -> Char -> String -> String"}, {"name": "repeat", "comment": " Repeat a string *n* times.\n\n    repeat 3 \"ha\" == \"hahaha\"\n", "type": "Int -> String -> String"}, {"name": "reverse", "comment": " Reverse a string.\n\n    reverse \"stressed\" == \"desserts\"\n", "type": "String -> String"}, {"name": "right", "comment": " Take *n* characters from the right side of a string.\n\n    right 2 \"Scully\" == \"ly\"\n", "type": "Int -> String -> String"}, {"name": "slice", "comment": " Take a substring given a start and end index. Negative indexes\nare taken starting from the *end* of the list.\n\n    slice  7  9 \"snakes on a plane!\" == \"on\"\n    slice  0  6 \"snakes on a plane!\" == \"snakes\"\n    slice  0 -7 \"snakes on a plane!\" == \"snakes on a\"\n    slice -6 -1 \"snakes on a plane!\" == \"plane\"\n", "type": "Int -> Int -> String -> String"}, {"name": "split", "comment": " Split a string using a given separator.\n\n    split \",\" \"cat,dog,cow\"        == [\"cat\",\"dog\",\"cow\"]\n    split \"/\" \"home/evan/Desktop/\" == [\"home\",\"evan\",\"Desktop\", \"\"]\n\nUse [`Regex.split`](Regex#split) if you need something more flexible.\n", "type": "String -> String -> List String"}, {"name": "startsWith", "comment": " See if the second string starts with the first one.\n\n    startsWith \"the\" \"theory\" == True\n    startsWith \"ory\" \"theory\" == False\n", "type": "String -> String -> Bool"}, {"name": "toFloat", "comment": " Try to convert a string into a float, failing on improperly formatted strings.\n\n    String.toFloat \"123\" == Ok 123.0\n    String.toFloat \"-42\" == Ok -42.0\n    String.toFloat \"3.1\" == Ok 3.1\n    String.toFloat \"31a\" == Err \"could not convert string '31a' to a Float\"\n\nIf you are extracting a number from some raw user input, you will typically\nwant to use [`Result.withDefault`](Result#withDefault) to handle bad data:\n\n    Result.withDefault 0 (String.toFloat \"42.5\") == 42.5\n    Result.withDefault 0 (String.toFloat \"cats\") == 0\n", "type": "String -> Result.Result String Float"}, {"name": "toInt", "comment": " Try to convert a string into an int, failing on improperly formatted strings.\n\n    String.toInt \"123\" == Ok 123\n    String.toInt \"-42\" == Ok -42\n    String.toInt \"3.1\" == Err \"could not convert string '3.1' to an Int\"\n    String.toInt \"31a\" == Err \"could not convert string '31a' to an Int\"\n\nIf you are extracting a number from some raw user input, you will typically\nwant to use [`Result.withDefault`](Result#withDefault) to handle bad data:\n\n    Result.withDefault 0 (String.toInt \"42\") == 42\n    Result.withDefault 0 (String.toInt \"ab\") == 0\n", "type": "String -> Result.Result String Int"}, {"name": "toList", "comment": " Convert a string to a list of characters.\n\n    toList \"abc\" == ['a','b','c']\n", "type": "String -> List Char"}, {"name": "toLower", "comment": " Convert a string to all lower case. Useful for case-insensitive comparisons.\n\n    toLower \"X-FILES\" == \"x-files\"\n", "type": "String -> String"}, {"name": "toUpper", "comment": " Convert a string to all upper case. Useful for case-insensitive comparisons\nand VIRTUAL YELLING.\n\n    toUpper \"skinner\" == \"SKINNER\"\n", "type": "String -> String"}, {"name": "trim", "comment": " Get rid of whitespace on both sides of a string.\n\n    trim \"  hats  \\n\" == \"hats\"\n", "type": "String -> String"}, {"name": "trimLeft", "comment": " Get rid of whitespace on the left of a string.\n\n    trimLeft \"  hats  \\n\" == \"hats  \\n\"\n", "type": "String -> String"}, {"name": "trimRight", "comment": " Get rid of whitespace on the right of a string.\n\n    trimRight \"  hats  \\n\" == \"  hats\"\n", "type": "String -> String"}, {"name": "uncons", "comment": " Split a non-empty string into its head and tail. This lets you\npattern match on strings exactly as you would with lists.\n\n    uncons \"abc\" == Just ('a',\"bc\")\n    uncons \"\"    == Nothing\n", "type": "String -> Maybe.Maybe ( Char, String )"}, {"name": "words", "comment": " Break a string into words, splitting on chunks of whitespace.\n\n    words \"How are \\t you? \\n Good?\" == [\"How\",\"are\",\"you?\",\"Good?\"]\n", "type": "String -> List String"}], "generated-with-elm-version": "0.18.0"}, {"name": "Platform", "comment": "\n\n# Programs\n@docs Program, program, programWithFlags\n\n# Platform Internals\n\n## Tasks and Processes\n@docs Task, ProcessId\n\n## Effect Manager Helpers\n\nAn extremely tiny portion of library authors should ever write effect managers.\nFundamentally, Elm needs maybe 10 of them total. I get that people are smart,\ncurious, etc. but that is not a substitute for a legitimate reason to make an\neffect manager. Do you have an *organic need* this fills? Or are you just\ncurious? Public discussions of your explorations should be framed accordingly.\n\n@docs Router, sendToApp, sendToSelf\n", "aliases": [], "types": [{"name": "ProcessId", "comment": " Head over to the documentation for the [`Process`](Process) module for\ninformation on this. It is only defined here because it is a platform\nprimitive.\n", "args": [], "cases": []}, {"name": "Program", "comment": " A `Program` describes how to manage your Elm app.\n\nYou can create [headless][] programs with the [`program`](#program) and\n[`programWithFlags`](#programWithFlags) functions. Similar functions exist in\n[`Html`][html] that let you specify a view.\n\n[headless]: https://en.wikipedia.org/wiki/Headless_software\n[html]: http://package.elm-lang.org/packages/elm-lang/html/latest/Html\n\nHonestly, it is totally normal if this seems crazy at first. The best way to\nunderstand is to work through [guide.elm-lang.org](http://guide.elm-lang.org/).\nIt makes way more sense in context!\n", "args": ["flags", "model", "msg"], "cases": []}, {"name": "Router", "comment": " An effect manager has access to a \u201crouter\u201d that routes messages between\nthe main app and your individual effect manager.\n", "args": ["appMsg", "selfMsg"], "cases": []}, {"name": "Task", "comment": " Head over to the documentation for the [`Task`](Task) module for more\ninformation on this. It is only defined here because it is a platform\nprimitive.\n", "args": ["err", "ok"], "cases": []}], "values": [{"name": "program", "comment": " Create a [headless][] program. This is great if you want to use Elm as the\n&ldquo;brain&rdquo; for something else. You can still communicate with JS via\nports and manage your model, you just do not have to specify a `view`.\n\n[headless]: https://en.wikipedia.org/wiki/Headless_software\n\nInitializing a headless program from JavaScript looks like this:\n\n```javascript\nvar app = Elm.MyThing.worker();\n```\n", "type": "{ init : ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg } -> Platform.Program Basics.Never model msg"}, {"name": "programWithFlags", "comment": " Same as [`program`](#program), but you can provide flags. Initializing a\nheadless program (with flags) from JavaScript looks like this:\n\n```javascript\nvar app = Elm.MyThing.worker({ user: 'Tom', token: 1234 });\n```\n\nWhatever argument you provide to `worker` will get converted to an Elm value,\nallowing you to configure your Elm program however you want from JavaScript!\n", "type": "{ init : flags -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg } -> Platform.Program flags model msg"}, {"name": "sendToApp", "comment": " Send the router a message for the main loop of your app. This message will\nbe handled by the overall `update` function, just like events from `Html`.\n", "type": "Platform.Router msg a -> msg -> Platform.Task x ()"}, {"name": "sendToSelf", "comment": " Send the router a message for your effect manager. This message will\nbe routed to the `onSelfMsg` function, where you can update the state of your\neffect manager as necessary.\n\nAs an example, the effect manager for web sockets\n", "type": "Platform.Router a msg -> msg -> Platform.Task x ()"}], "generated-with-elm-version": "0.18.0"}, {"name": "Regex", "comment": " A library for working with regular expressions. It uses [the\nsame kind of regular expressions accepted by JavaScript](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions).\n\n# Create\n@docs Regex, regex, escape, caseInsensitive\n\n# Helpful Data Structures\n\nThese data structures are needed to help define functions like [`find`](#find)\nand [`replace`](#replace).\n\n@docs HowMany, Match\n\n# Use\n@docs contains, find, replace, split\n\n", "aliases": [{"name": "Match", "comment": " A `Match` represents all of the details about a particular match in a string.\nHere are details on each field:\n\n  * `match` &mdash; the full string of the match.\n  * `submatches` &mdash; a regex might have [subpatterns, surrounded by\n    parentheses](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Parenthesized_Substring_Matches).\n    If there are N subpatterns, there will be N elements in the `submatches` list.\n    Each submatch in this list is a `Maybe` because not all subpatterns may trigger.\n    For example, `(regex \"(a+)|(b+)\")` will either match many `a`&rsquo;s or\n    many `b`&rsquo;s, but never both.\n  * `index` &mdash; the index of the match in the original string.\n  * `number` &mdash; if you find many matches, you can think of each one\n    as being labeled with a `number` starting at one. So the first time you\n    find a match, that is match `number` one. Second time is match `number` two.\n    This is useful when paired with `replace All` if replacement is dependent on how\n    many times a pattern has appeared before.\n", "args": [], "type": "{ match : String , submatches : List (Maybe.Maybe String) , index : Int , number : Int }"}], "types": [{"name": "HowMany", "comment": " `HowMany` is used to specify how many matches you want to make. So\n`replace All` would replace every match, but `replace (AtMost 2)` would\nreplace at most two matches (i.e. zero, one, two, but never three or more).\n", "args": [], "cases": [["All", []], ["AtMost", ["Int"]]]}, {"name": "Regex", "comment": " A regular expression, describing a certain set of strings.\n", "args": [], "cases": []}], "values": [{"name": "caseInsensitive", "comment": " Make a regex case insensitive ", "type": "Regex.Regex -> Regex.Regex"}, {"name": "contains", "comment": " Check to see if a Regex is contained in a string.\n\n    contains (regex \"123\") \"12345\" == True\n    contains (regex \"b+\") \"aabbcc\" == True\n\n    contains (regex \"789\") \"12345\" == False\n    contains (regex \"z+\") \"aabbcc\" == False\n", "type": "Regex.Regex -> String -> Bool"}, {"name": "escape", "comment": " Escape strings to be regular expressions, making all special characters\nsafe. So `regex (escape \"^a+\")` will match exactly `\"^a+\"` instead of a series\nof `a`&rsquo;s that start at the beginning of the line.\n", "type": "String -> String"}, {"name": "find", "comment": " Find matches in a string:\n\n    findTwoCommas = find (AtMost 2) (regex \",\")\n\n      -- map .index (findTwoCommas \"a,b,c,d,e\") == [1,3]\n      -- map .index (findTwoCommas \"a b c d e\") == []\n\n    places = find All (regex \"[oi]n a (\\\\w+)\") \"I am on a boat in a lake.\"\n\n      -- map .match places == [\"on a boat\", \"in a lake\"]\n      -- map .submatches places == [ [Just \"boat\"], [Just \"lake\"] ]\n", "type": "Regex.HowMany -> Regex.Regex -> String -> List Regex.Match"}, {"name": "regex", "comment": " Create a Regex that matches patterns [as specified in JavaScript](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Writing_a_Regular_Expression_Pattern).\n\nBe careful to escape backslashes properly! For example, `\"\\w\"` is escaping the\nletter `w` which is probably not what you want. You probably want `\"\\\\w\"`\ninstead, which escapes the backslash.\n", "type": "String -> Regex.Regex"}, {"name": "replace", "comment": " Replace matches. The function from `Match` to `String` lets\nyou use the details of a specific match when making replacements.\n\n    devowel = replace All (regex \"[aeiou]\") (\\_ -> \"\")\n\n      -- devowel \"The quick brown fox\" == \"Th qck brwn fx\"\n\n    reverseWords = replace All (regex \"\\\\w+\") (\\{match} -> String.reverse match)\n\n      -- reverseWords \"deliver mined parts\" == \"reviled denim strap\"\n", "type": "Regex.HowMany -> Regex.Regex -> (Regex.Match -> String) -> String -> String"}, {"name": "split", "comment": " Split a string, using the regex as the separator.\n\n    split (AtMost 1) (regex \",\") \"tom,99,90,85\" == [\"tom\",\"99,90,85\"]\n\n    split All (regex \",\") \"a,b,c,d\" == [\"a\",\"b\",\"c\",\"d\"]\n", "type": "Regex.HowMany -> Regex.Regex -> String -> List String"}], "generated-with-elm-version": "0.18.0"}, {"name": "List", "comment": " A library for manipulating lists of values. Every value in a\nlist must have the same type.\n\n# Basics\n@docs isEmpty, length, reverse, member\n\n# Sub-lists\n@docs head, tail, filter, take, drop\n\n# Putting Lists Together\n@docs singleton, repeat, range, (::), append, concat, intersperse\n\n# Taking Lists Apart\n@docs partition, unzip\n\n# Mapping\n@docs map, map2, map3, map4, map5\n\nIf you can think of a legitimate use of `mapN` where `N` is 6 or more, please\nlet us know on [the list](https://groups.google.com/forum/#!forum/elm-discuss).\nThe current sentiment is that it is already quite error prone once you get to\n4 and possibly should be approached another way.\n\n# Special Maps\n@docs filterMap, concatMap, indexedMap\n\n# Folding\n@docs foldr, foldl\n\n# Special Folds\n@docs sum, product, maximum, minimum, all, any, scanl\n\n# Sorting\n@docs sort, sortBy, sortWith\n\n", "aliases": [], "types": [], "values": [{"name": "::", "comment": " Add an element to the front of a list. Pronounced *cons*.\n\n    1 :: [2,3] == [1,2,3]\n    1 :: [] == [1]\n", "type": "a -> List a -> List a", "associativity": "right", "precedence": 5}, {"name": "all", "comment": " Determine if all elements satisfy the predicate.\n\n    all isEven [2,4] == True\n    all isEven [2,3] == False\n    all isEven [] == True\n", "type": "(a -> Bool) -> List a -> Bool"}, {"name": "any", "comment": " Determine if any elements satisfy the predicate.\n\n    any isEven [2,3] == True\n    any isEven [1,3] == False\n    any isEven [] == False\n", "type": "(a -> Bool) -> List a -> Bool"}, {"name": "append", "comment": " Put two lists together.\n\n    append [1,1,2] [3,5,8] == [1,1,2,3,5,8]\n    append ['a','b'] ['c'] == ['a','b','c']\n\nYou can also use [the `(++)` operator](Basics#++) to append lists.\n", "type": "List a -> List a -> List a"}, {"name": "concat", "comment": " Concatenate a bunch of lists into a single list:\n\n    concat [[1,2],[3],[4,5]] == [1,2,3,4,5]\n", "type": "List (List a) -> List a"}, {"name": "concatMap", "comment": " Map a given function onto a list and flatten the resulting lists.\n\n    concatMap f xs == concat (map f xs)\n", "type": "(a -> List b) -> List a -> List b"}, {"name": "drop", "comment": " Drop the first *n* members of a list.\n\n    drop 2 [1,2,3,4] == [3,4]\n", "type": "Int -> List a -> List a"}, {"name": "filter", "comment": " Keep only elements that satisfy the predicate.\n\n    filter isEven [1,2,3,4,5,6] == [2,4,6]\n", "type": "(a -> Bool) -> List a -> List a"}, {"name": "filterMap", "comment": " Apply a function that may succeed to all values in the list, but only keep\nthe successes.\n\n    onlyTeens =\n      filterMap isTeen [3, 15, 12, 18, 24] == [15, 18]\n\n    isTeen : Int -> Maybe Int\n    isTeen n =\n      if 13 <= n && n <= 19 then\n        Just n\n\n      else\n        Nothing\n", "type": "(a -> Maybe.Maybe b) -> List a -> List b"}, {"name": "foldl", "comment": " Reduce a list from the left.\n\n    foldl (::) [] [1,2,3] == [3,2,1]\n", "type": "(a -> b -> b) -> b -> List a -> b"}, {"name": "foldr", "comment": " Reduce a list from the right.\n\n    foldr (+) 0 [1,2,3] == 6\n", "type": "(a -> b -> b) -> b -> List a -> b"}, {"name": "head", "comment": " Extract the first element of a list.\n\n    head [1,2,3] == Just 1\n    head [] == Nothing\n", "type": "List a -> Maybe.Maybe a"}, {"name": "indexedMap", "comment": " Same as `map` but the function is also applied to the index of each\nelement (starting at zero).\n\n    indexedMap (,) [\"Tom\",\"Sue\",\"Bob\"] == [ (0,\"Tom\"), (1,\"Sue\"), (2,\"Bob\") ]\n", "type": "(Int -> a -> b) -> List a -> List b"}, {"name": "intersperse", "comment": " Places the given value between all members of the given list.\n\n    intersperse \"on\" [\"turtles\",\"turtles\",\"turtles\"] == [\"turtles\",\"on\",\"turtles\",\"on\",\"turtles\"]\n", "type": "a -> List a -> List a"}, {"name": "isEmpty", "comment": " Determine if a list is empty.\n\n    isEmpty [] == True\n", "type": "List a -> Bool"}, {"name": "length", "comment": " Determine the length of a list.\n\n    length [1,2,3] == 3\n", "type": "List a -> Int"}, {"name": "map", "comment": " Apply a function to every element of a list.\n\n    map sqrt [1,4,9] == [1,2,3]\n\n    map not [True,False,True] == [False,True,False]\n", "type": "(a -> b) -> List a -> List b"}, {"name": "map2", "comment": " Combine two lists, combining them with the given function.\nIf one list is longer, the extra elements are dropped.\n\n    map2 (+) [1,2,3] [1,2,3,4] == [2,4,6]\n\n    map2 (,) [1,2,3] ['a','b'] == [ (1,'a'), (2,'b') ]\n\n    pairs : List a -> List b -> List (a,b)\n    pairs lefts rights =\n        map2 (,) lefts rights\n", "type": "(a -> b -> result) -> List a -> List b -> List result"}, {"name": "map3", "comment": "", "type": "(a -> b -> c -> result) -> List a -> List b -> List c -> List result"}, {"name": "map4", "comment": "", "type": "(a -> b -> c -> d -> result) -> List a -> List b -> List c -> List d -> List result"}, {"name": "map5", "comment": "", "type": "(a -> b -> c -> d -> e -> result) -> List a -> List b -> List c -> List d -> List e -> List result"}, {"name": "maximum", "comment": " Find the maximum element in a non-empty list.\n\n    maximum [1,4,2] == Just 4\n    maximum []      == Nothing\n", "type": "List comparable -> Maybe.Maybe comparable"}, {"name": "member", "comment": " Figure out whether a list contains a value.\n\n    member 9 [1,2,3,4] == False\n    member 4 [1,2,3,4] == True\n", "type": "a -> List a -> Bool"}, {"name": "minimum", "comment": " Find the minimum element in a non-empty list.\n\n    minimum [3,2,1] == Just 1\n    minimum []      == Nothing\n", "type": "List comparable -> Maybe.Maybe comparable"}, {"name": "partition", "comment": " Partition a list based on a predicate. The first list contains all values\nthat satisfy the predicate, and the second list contains all the value that do\nnot.\n\n    partition (\\x -> x < 3) [0,1,2,3,4,5] == ([0,1,2], [3,4,5])\n    partition isEven        [0,1,2,3,4,5] == ([0,2,4], [1,3,5])\n", "type": "(a -> Bool) -> List a -> ( List a, List a )"}, {"name": "product", "comment": " Get the product of the list elements.\n\n    product [1,2,3,4] == 24\n", "type": "List number -> number"}, {"name": "range", "comment": " Create a list of numbers, every element increasing by one.\nYou give the lowest and highest number that should be in the list.\n\n    range 3 6 == [3, 4, 5, 6]\n    range 3 3 == [3]\n    range 6 3 == []\n", "type": "Int -> Int -> List Int"}, {"name": "repeat", "comment": " Create a list with *n* copies of a value:\n\n    repeat 3 (0,0) == [(0,0),(0,0),(0,0)]\n", "type": "Int -> a -> List a"}, {"name": "reverse", "comment": " Reverse a list.\n\n    reverse [1,2,3,4] == [4,3,2,1]\n", "type": "List a -> List a"}, {"name": "scanl", "comment": " Reduce a list from the left, building up all of the intermediate results into a list.\n\n    scanl (+) 0 [1,2,3,4] == [0,1,3,6,10]\n", "type": "(a -> b -> b) -> b -> List a -> List b"}, {"name": "singleton", "comment": " Create a list with only one element:\n\n    singleton 1234 == [1234]\n    singleton \"hi\" == [\"hi\"]\n", "type": "a -> List a"}, {"name": "sort", "comment": " Sort values from lowest to highest\n\n    sort [3,1,5] == [1,3,5]\n", "type": "List comparable -> List comparable"}, {"name": "sortBy", "comment": " Sort values by a derived property.\n\n    alice = { name=\"Alice\", height=1.62 }\n    bob   = { name=\"Bob\"  , height=1.85 }\n    chuck = { name=\"Chuck\", height=1.76 }\n\n    sortBy .name   [chuck,alice,bob] == [alice,bob,chuck]\n    sortBy .height [chuck,alice,bob] == [alice,chuck,bob]\n\n    sortBy String.length [\"mouse\",\"cat\"] == [\"cat\",\"mouse\"]\n", "type": "(a -> comparable) -> List a -> List a"}, {"name": "sortWith", "comment": " Sort values with a custom comparison function.\n\n    sortWith flippedComparison [1,2,3,4,5] == [5,4,3,2,1]\n\n    flippedComparison a b =\n        case compare a b of\n          LT -> GT\n          EQ -> EQ\n          GT -> LT\n\nThis is also the most general sort function, allowing you\nto define any other: `sort == sortWith compare`\n", "type": "(a -> a -> Basics.Order) -> List a -> List a"}, {"name": "sum", "comment": " Get the sum of the list elements.\n\n    sum [1,2,3,4] == 10\n", "type": "List number -> number"}, {"name": "tail", "comment": " Extract the rest of the list.\n\n    tail [1,2,3] == Just [2,3]\n    tail [] == Nothing\n", "type": "List a -> Maybe.Maybe (List a)"}, {"name": "take", "comment": " Take the first *n* members of a list.\n\n    take 2 [1,2,3,4] == [1,2]\n", "type": "Int -> List a -> List a"}, {"name": "unzip", "comment": " Decompose a list of tuples into a tuple of lists.\n\n    unzip [(0, True), (17, False), (1337, True)] == ([0,17,1337], [True,False,True])\n", "type": "List ( a, b ) -> ( List a, List b )"}], "generated-with-elm-version": "0.18.0"}, {"name": "Result", "comment": " A `Result` is the result of a computation that may fail. This is a great\nway to manage errors in Elm.\n\n# Type and Constructors\n@docs Result\n\n# Mapping\n@docs map, map2, map3, map4, map5\n\n# Chaining\n@docs andThen\n\n# Handling Errors\n@docs withDefault, toMaybe, fromMaybe, mapError\n", "aliases": [], "types": [{"name": "Result", "comment": " A `Result` is either `Ok` meaning the computation succeeded, or it is an\n`Err` meaning that there was some failure.\n", "args": ["error", "value"], "cases": [["Ok", ["value"]], ["Err", ["error"]]]}], "values": [{"name": "andThen", "comment": " Chain together a sequence of computations that may fail. It is helpful\nto see its definition:\n\n    andThen : (a -> Result e b) -> Result e a -> Result e b\n    andThen callback result =\n        case result of\n          Ok value -> callback value\n          Err msg -> Err msg\n\nThis means we only continue with the callback if things are going well. For\nexample, say you need to use (`toInt : String -> Result String Int`) to parse\na month and make sure it is between 1 and 12:\n\n    toValidMonth : Int -> Result String Int\n    toValidMonth month =\n        if month >= 1 && month <= 12\n            then Ok month\n            else Err \"months must be between 1 and 12\"\n\n    toMonth : String -> Result String Int\n    toMonth rawString =\n        toInt rawString\n          |> andThen toValidMonth\n\n    -- toMonth \"4\" == Ok 4\n    -- toMonth \"9\" == Ok 9\n    -- toMonth \"a\" == Err \"cannot parse to an Int\"\n    -- toMonth \"0\" == Err \"months must be between 1 and 12\"\n\nThis allows us to come out of a chain of operations with quite a specific error\nmessage. It is often best to create a custom type that explicitly represents\nthe exact ways your computation may fail. This way it is easy to handle in your\ncode.\n", "type": "(a -> Result.Result x b) -> Result.Result x a -> Result.Result x b"}, {"name": "fromMaybe", "comment": " Convert from a simple `Maybe` to interact with some code that primarily\nuses `Results`.\n\n    parseInt : String -> Maybe Int\n\n    resultParseInt : String -> Result String Int\n    resultParseInt string =\n        fromMaybe (\"error parsing string: \" ++ toString string) (parseInt string)\n", "type": "x -> Maybe.Maybe a -> Result.Result x a"}, {"name": "map", "comment": " Apply a function to a result. If the result is `Ok`, it will be converted.\nIf the result is an `Err`, the same error value will propagate through.\n\n    map sqrt (Ok 4.0)          == Ok 2.0\n    map sqrt (Err \"bad input\") == Err \"bad input\"\n", "type": "(a -> value) -> Result.Result x a -> Result.Result x value"}, {"name": "map2", "comment": " Apply a function to two results, if both results are `Ok`. If not,\nthe first argument which is an `Err` will propagate through.\n\n    map2 (+) (String.toInt \"1\") (String.toInt \"2\") == Ok 3\n    map2 (+) (String.toInt \"1\") (String.toInt \"y\") == Err \"could not convert string 'y' to an Int\"\n    map2 (+) (String.toInt \"x\") (String.toInt \"y\") == Err \"could not convert string 'x' to an Int\"\n", "type": "(a -> b -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x value"}, {"name": "map3", "comment": "", "type": "(a -> b -> c -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x c -> Result.Result x value"}, {"name": "map4", "comment": "", "type": "(a -> b -> c -> d -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x c -> Result.Result x d -> Result.Result x value"}, {"name": "map5", "comment": "", "type": "(a -> b -> c -> d -> e -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x c -> Result.Result x d -> Result.Result x e -> Result.Result x value"}, {"name": "mapError", "comment": " Transform an `Err` value. For example, say the errors we get have too much\ninformation:\n\n    parseInt : String -> Result ParseError Int\n\n    type alias ParseError =\n        { message : String\n        , code : Int\n        , position : (Int,Int)\n        }\n\n    mapError .message (parseInt \"123\") == Ok 123\n    mapError .message (parseInt \"abc\") == Err \"char 'a' is not a number\"\n", "type": "(x -> y) -> Result.Result x a -> Result.Result y a"}, {"name": "toMaybe", "comment": " Convert to a simpler `Maybe` if the actual error message is not needed or\nyou need to interact with some code that primarily uses maybes.\n\n    parseInt : String -> Result ParseError Int\n\n    maybeParseInt : String -> Maybe Int\n    maybeParseInt string =\n        toMaybe (parseInt string)\n", "type": "Result.Result x a -> Maybe.Maybe a"}, {"name": "withDefault", "comment": " If the result is `Ok` return the value, but if the result is an `Err` then\nreturn a given default value. The following examples try to parse integers.\n\n    Result.withDefault 0 (String.toInt \"123\") == 123\n    Result.withDefault 0 (String.toInt \"abc\") == 0\n", "type": "a -> Result.Result x a -> a"}], "generated-with-elm-version": "0.18.0"}, {"name": "Color", "comment": " Library for working with colors. Includes\n[RGB](https://en.wikipedia.org/wiki/RGB_color_model) and\n[HSL](http://en.wikipedia.org/wiki/HSL_and_HSV) creation, gradients, and\nbuilt-in names.\n\n# Colors\n@docs Color\n\n# Creation\n@docs rgb, rgba, hsl, hsla, greyscale, grayscale, complement\n\n# Gradients\n@docs Gradient, linear, radial\n\n# Extracting Colors\n@docs toRgb, toHsl\n\n# Built-in Colors\nThese colors come from the [Tango\npalette](http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines)\nwhich provides aesthetically reasonable defaults for colors. Each color also\ncomes with a light and dark version.\n\n### Standard\n@docs red, orange, yellow, green, blue, purple, brown\n\n### Light\n@docs lightRed, lightOrange, lightYellow, lightGreen, lightBlue, lightPurple, lightBrown\n\n### Dark\n@docs darkRed, darkOrange, darkYellow, darkGreen, darkBlue, darkPurple, darkBrown\n\n### Eight Shades of Grey\nThese colors are a compatible series of shades of grey, fitting nicely\nwith the Tango palette.\n@docs white, lightGrey, grey, darkGrey, lightCharcoal, charcoal, darkCharcoal, black\n\nThese are identical to the *grey* versions. It seems the spelling is regional, but\nthat has never helped me remember which one I should be writing.\n@docs lightGray, gray, darkGray\n\n", "aliases": [], "types": [{"name": "Color", "comment": " Representation of colors.\n", "args": [], "cases": []}, {"name": "Gradient", "comment": " Abstract representation of a color gradient.\n", "args": [], "cases": []}], "values": [{"name": "black", "comment": "", "type": "Color.Color"}, {"name": "blue", "comment": "", "type": "Color.Color"}, {"name": "brown", "comment": "", "type": "Color.Color"}, {"name": "charcoal", "comment": "", "type": "Color.Color"}, {"name": "complement", "comment": " Produce a &ldquo;complementary color&rdquo;. The two colors will\naccent each other. This is the same as rotating the hue by 180&deg;.\n", "type": "Color.Color -> Color.Color"}, {"name": "darkBlue", "comment": "", "type": "Color.Color"}, {"name": "darkBrown", "comment": "", "type": "Color.Color"}, {"name": "darkCharcoal", "comment": "", "type": "Color.Color"}, {"name": "darkGray", "comment": "", "type": "Color.Color"}, {"name": "darkGreen", "comment": "", "type": "Color.Color"}, {"name": "darkGrey", "comment": "", "type": "Color.Color"}, {"name": "darkOrange", "comment": "", "type": "Color.Color"}, {"name": "darkPurple", "comment": "", "type": "Color.Color"}, {"name": "darkRed", "comment": "", "type": "Color.Color"}, {"name": "darkYellow", "comment": "", "type": "Color.Color"}, {"name": "gray", "comment": "", "type": "Color.Color"}, {"name": "grayscale", "comment": " Produce a gray based on the input. 0 is white, 1 is black.\n", "type": "Float -> Color.Color"}, {"name": "green", "comment": "", "type": "Color.Color"}, {"name": "grey", "comment": "", "type": "Color.Color"}, {"name": "greyscale", "comment": " Produce a gray based on the input. 0 is white, 1 is black.\n", "type": "Float -> Color.Color"}, {"name": "hsl", "comment": " Create [HSL colors](http://en.wikipedia.org/wiki/HSL_and_HSV). This gives\nyou access to colors more like a color wheel, where all hues are arranged in a\ncircle that you specify with standard Elm angles (radians).\n\n    red   = hsl (degrees   0) 1 0.5\n    green = hsl (degrees 120) 1 0.5\n    blue  = hsl (degrees 240) 1 0.5\n\n    pastelRed = hsl (degrees 0) 0.7 0.7\n\nTo cycle through all colors, just cycle through degrees. The saturation level\nis how vibrant the color is, like a dial between grey and bright colors. The\nlightness level is a dial between white and black.\n", "type": "Float -> Float -> Float -> Color.Color"}, {"name": "hsla", "comment": " Create [HSL colors](http://en.wikipedia.org/wiki/HSL_and_HSV)\nwith an alpha component for transparency.\n", "type": "Float -> Float -> Float -> Float -> Color.Color"}, {"name": "lightBlue", "comment": "", "type": "Color.Color"}, {"name": "lightBrown", "comment": "", "type": "Color.Color"}, {"name": "lightCharcoal", "comment": "", "type": "Color.Color"}, {"name": "lightGray", "comment": "", "type": "Color.Color"}, {"name": "lightGreen", "comment": "", "type": "Color.Color"}, {"name": "lightGrey", "comment": "", "type": "Color.Color"}, {"name": "lightOrange", "comment": "", "type": "Color.Color"}, {"name": "lightPurple", "comment": "", "type": "Color.Color"}, {"name": "lightRed", "comment": "", "type": "Color.Color"}, {"name": "lightYellow", "comment": "", "type": "Color.Color"}, {"name": "linear", "comment": " Create a linear gradient. Takes a start and end point and then a series of\n&ldquo;color stops&rdquo; that indicate how to interpolate between the start and\nend points. See [this example](http://elm-lang.org/examples/linear-gradient) for a\nmore visual explanation.\n", "type": "( Float, Float ) -> ( Float, Float ) -> List ( Float, Color.Color ) -> Color.Gradient"}, {"name": "orange", "comment": "", "type": "Color.Color"}, {"name": "purple", "comment": "", "type": "Color.Color"}, {"name": "radial", "comment": " Create a radial gradient. First takes a start point and inner radius.  Then\ntakes an end point and outer radius. It then takes a series of &ldquo;color\nstops&rdquo; that indicate how to interpolate between the inner and outer\ncircles. See [this example](http://elm-lang.org/examples/radial-gradient) for a\nmore visual explanation.\n", "type": "( Float, Float ) -> Float -> ( Float, Float ) -> Float -> List ( Float, Color.Color ) -> Color.Gradient"}, {"name": "red", "comment": "", "type": "Color.Color"}, {"name": "rgb", "comment": " Create RGB colors from numbers between 0 and 255 inclusive. ", "type": "Int -> Int -> Int -> Color.Color"}, {"name": "rgba", "comment": " Create RGB colors with an alpha component for transparency.\nThe alpha component is specified with numbers between 0 and 1. ", "type": "Int -> Int -> Int -> Float -> Color.Color"}, {"name": "toHsl", "comment": " Extract the components of a color in the HSL format.\n", "type": "Color.Color -> { hue : Float , saturation : Float , lightness : Float , alpha : Float }"}, {"name": "toRgb", "comment": " Extract the components of a color in the RGB format.\n", "type": "Color.Color -> { red : Int, green : Int, blue : Int, alpha : Float }"}, {"name": "white", "comment": "", "type": "Color.Color"}, {"name": "yellow", "comment": "", "type": "Color.Color"}], "generated-with-elm-version": "0.18.0"}, {"name": "Char", "comment": " Functions for working with characters. Character literals are enclosed in\n`'a'` pair of single quotes.\n\n# Classification\n@docs isUpper, isLower, isDigit, isOctDigit, isHexDigit\n\n# Conversion\n@docs toUpper, toLower, toLocaleUpper, toLocaleLower\n\n# Key Codes\n@docs KeyCode, toCode, fromCode\n\n", "aliases": [{"name": "KeyCode", "comment": " Keyboard keys can be represented as integers. These are called *key codes*.\nYou can use [`toCode`](#toCode) and [`fromCode`](#fromCode) to convert between\nkey codes and characters.\n", "args": [], "type": "Int"}], "types": [], "values": [{"name": "fromCode", "comment": " Convert from key code. ", "type": "Char.KeyCode -> Char"}, {"name": "isDigit", "comment": " True for ASCII digits `[0-9]`. ", "type": "Char -> Bool"}, {"name": "isHexDigit", "comment": " True for ASCII hexadecimal digits `[0-9a-fA-F]`. ", "type": "Char -> Bool"}, {"name": "isLower", "comment": " True for lower case ASCII letters. ", "type": "Char -> Bool"}, {"name": "isOctDigit", "comment": " True for ASCII octal digits `[0-7]`. ", "type": "Char -> Bool"}, {"name": "isUpper", "comment": " True for upper case ASCII letters. ", "type": "Char -> Bool"}, {"name": "toCode", "comment": " Convert to key code.\n", "type": "Char -> Char.KeyCode"}, {"name": "toLocaleLower", "comment": " Convert to lower case, according to any locale-specific case mappings. ", "type": "Char -> Char"}, {"name": "toLocaleUpper", "comment": " Convert to upper case, according to any locale-specific case mappings. ", "type": "Char -> Char"}, {"name": "toLower", "comment": " Convert to lower case. ", "type": "Char -> Char"}, {"name": "toUpper", "comment": " Convert to upper case. ", "type": "Char -> Char"}], "generated-with-elm-version": "0.18.0"}, {"name": "Tuple", "comment": " Some helpers for working with 2-tuples.\n\n**Note:** For larger chunks of data, it is best to switch to using records. So\ninstead of representing a 3D point as `(3,4,5)` and wondering why there are no\nhelper functions, represent it as `{ x = 3, y = 4, z = 5 }` and use all the\nbuilt-in syntax for records.\n\n@docs first, second, mapFirst, mapSecond\n\n", "aliases": [], "types": [], "values": [{"name": "first", "comment": " Extract the first value from a tuple.\n\n    first (3, 4) == 3\n    first (\"john\", \"doe\") == \"john\"\n", "type": "( a1, a2 ) -> a1"}, {"name": "mapFirst", "comment": " Transform the first value in a tuple.\n\n    import String\n\n    mapFirst String.reverse (\"stressed\", 16) == (\"desserts\", 16)\n    mapFirst String.length  (\"stressed\", 16) == (8, 16)\n", "type": "(a -> b) -> ( a, a2 ) -> ( b, a2 )"}, {"name": "mapSecond", "comment": " Transform the second value in a tuple.\n\n    import String\n\n    mapSecond sqrt          (\"stressed\", 16) == (\"stressed\", 4)\n    mapSecond (\\x -> x + 1) (\"stressed\", 16) == (\"stressed\", 17)\n", "type": "(a -> b) -> ( a1, a ) -> ( a1, b )"}, {"name": "second", "comment": " Extract the second value from a tuple.\n\n    second (3, 4) == 4\n    second (\"john\", \"doe\") == \"doe\"\n", "type": "( a1, a2 ) -> a2"}], "generated-with-elm-version": "0.18.0"}, {"name": "Platform.Sub", "comment": "\n\n@docs Sub, map, batch, none\n", "aliases": [], "types": [{"name": "Sub", "comment": " A subscription is a way of telling Elm, \u201cHey, let me know if anything\ninteresting happens over there!\u201d So if you want to listen for messages on a web\nsocket, you would tell Elm to create a subscription. If you want to get clock\nticks, you would tell Elm to subscribe to that. The cool thing here is that\nthis means *Elm* manages all the details of subscriptions instead of *you*.\nSo if a web socket goes down, *you* do not need to manually reconnect with an\nexponential backoff strategy, *Elm* does this all for you behind the scenes!\n\nEvery `Sub` specifies (1) which effects you need access to and (2) the type of\nmessages that will come back into your application.\n\n**Note:** Do not worry if this seems confusing at first! As with every Elm user\never, subscriptions will make more sense as you work through [the Elm Architecture\nTutorial](http://guide.elm-lang.org/architecture/index.html) and see how they fit\ninto a real application!\n", "args": ["msg"], "cases": []}], "values": [{"name": "batch", "comment": "", "type": "List (Platform.Sub.Sub msg) -> Platform.Sub.Sub msg"}, {"name": "map", "comment": "", "type": "(a -> msg) -> Platform.Sub.Sub a -> Platform.Sub.Sub msg"}, {"name": "none", "comment": "", "type": "Platform.Sub.Sub msg"}], "generated-with-elm-version": "0.18.0"}, {"name": "Platform.Cmd", "comment": "\n\n# Effects\n\nElm has **managed effects**, meaning that things like HTTP requests or writing\nto disk are all treated as *data* in Elm. When this data is given to the Elm\nruntime system, it can do some \u201cquery optimization\u201d before actually performing\nthe effect. Perhaps unexpectedly, this managed effects idea is the heart of why\nElm is so nice for testing, reuse, reproducibility, etc.\n\nThere are two kinds of managed effects you will use in your programs: commands\nand subscriptions.\n\n@docs Cmd, map, batch, none, (!)\n\n", "aliases": [], "types": [{"name": "Cmd", "comment": " A command is a way of telling Elm, \u201cHey, I want you to do this thing!\u201d\nSo if you want to send an HTTP request, you would need to command Elm to do it.\nOr if you wanted to ask for geolocation, you would need to command Elm to go\nget it.\n\nEvery `Cmd` specifies (1) which effects you need access to and (2) the type of\nmessages that will come back into your application.\n\n**Note:** Do not worry if this seems confusing at first! As with every Elm user\never, commands will make more sense as you work through [the Elm Architecture\nTutorial](http://guide.elm-lang.org/architecture/index.html) and see how they\nfit into a real application!\n", "args": ["msg"], "cases": []}], "values": [{"name": "!", "comment": "", "type": "model -> List (Platform.Cmd.Cmd msg) -> ( model, Platform.Cmd.Cmd msg )"}, {"name": "batch", "comment": "", "type": "List (Platform.Cmd.Cmd msg) -> Platform.Cmd.Cmd msg"}, {"name": "map", "comment": "", "type": "(a -> msg) -> Platform.Cmd.Cmd a -> Platform.Cmd.Cmd msg"}, {"name": "none", "comment": "", "type": "Platform.Cmd.Cmd msg"}], "generated-with-elm-version": "0.18.0"}, {"name": "Maybe", "comment": " This library fills a bunch of important niches in Elm. A `Maybe` can help\nyou with optional arguments, error handling, and records with optional fields.\n\n# Definition\n@docs Maybe\n\n# Common Helpers\n@docs withDefault, map, map2, map3, map4, map5\n\n# Chaining Maybes\n@docs andThen\n", "aliases": [], "types": [{"name": "Maybe", "comment": " Represent values that may or may not exist. It can be useful if you have a\nrecord field that is only filled in sometimes. Or if a function takes a value\nsometimes, but does not absolutely need it.\n\n    -- A person, but maybe we do not know their age.\n    type alias Person =\n        { name : String\n        , age : Maybe Int\n        }\n\n    tom = { name = \"Tom\", age = Just 42 }\n    sue = { name = \"Sue\", age = Nothing }\n", "args": ["a"], "cases": [["Just", ["a"]], ["Nothing", []]]}], "values": [{"name": "andThen", "comment": " Chain together many computations that may fail. It is helpful to see its\ndefinition:\n\n    andThen : (a -> Maybe b) -> Maybe a -> Maybe b\n    andThen callback maybe =\n        case maybe of\n            Just value ->\n                callback value\n\n            Nothing ->\n                Nothing\n\nThis means we only continue with the callback if things are going well. For\nexample, say you need to use (`head : List Int -> Maybe Int`) to get the\nfirst month from a `List` and then make sure it is between 1 and 12:\n\n    toValidMonth : Int -> Maybe Int\n    toValidMonth month =\n        if month >= 1 && month <= 12 then\n            Just month\n        else\n            Nothing\n\n    getFirstMonth : List Int -> Maybe Int\n    getFirstMonth months =\n        head months\n          |> andThen toValidMonth\n\nIf `head` fails and results in `Nothing` (because the `List` was `empty`),\nthis entire chain of operations will short-circuit and result in `Nothing`.\nIf `toValidMonth` results in `Nothing`, again the chain of computations\nwill result in `Nothing`.\n", "type": "(a -> Maybe.Maybe b) -> Maybe.Maybe a -> Maybe.Maybe b"}, {"name": "map", "comment": " Transform a `Maybe` value with a given function:\n\n    map sqrt (Just 9) == Just 3\n    map sqrt Nothing == Nothing\n", "type": "(a -> b) -> Maybe.Maybe a -> Maybe.Maybe b"}, {"name": "map2", "comment": " Apply a function if all the arguments are `Just` a value.\n\n    map2 (+) (Just 3) (Just 4) == Just 7\n    map2 (+) (Just 3) Nothing == Nothing\n    map2 (+) Nothing (Just 4) == Nothing\n", "type": "(a -> b -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe value"}, {"name": "map3", "comment": "", "type": "(a -> b -> c -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe value"}, {"name": "map4", "comment": "", "type": "(a -> b -> c -> d -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe d -> Maybe.Maybe value"}, {"name": "map5", "comment": "", "type": "(a -> b -> c -> d -> e -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe d -> Maybe.Maybe e -> Maybe.Maybe value"}, {"name": "withDefault", "comment": " Provide a default value, turning an optional value into a normal\nvalue.  This comes in handy when paired with functions like\n[`Dict.get`](Dict#get) which gives back a `Maybe`.\n\n    withDefault 100 (Just 42)   -- 42\n    withDefault 100 Nothing     -- 100\n\n    withDefault \"unknown\" (Dict.get \"Tom\" Dict.empty)   -- \"unknown\"\n\n", "type": "a -> Maybe.Maybe a -> a"}], "generated-with-elm-version": "0.18.0"}, {"name": "Debug", "comment": " This library is for investigating bugs or performance problems. It should\n*not* be used in production code.\n\n# Debugging\n@docs log, crash\n", "aliases": [], "types": [], "values": [{"name": "crash", "comment": " Crash the program with an error message. This is an uncatchable error,\nintended for code that is soon-to-be-implemented. For example, if you are\nworking with a large ADT and have partially completed a case expression, it may\nmake sense to do this:\n\n    type Entity = Ship | Fish | Captain | Seagull\n\n    drawEntity entity =\n      case entity of\n        Ship ->\n          ...\n\n        Fish ->\n          ...\n\n        _ ->\n          Debug.crash \"TODO\"\n\nThe Elm compiler recognizes each `Debug.crash` and when you run into it at\nruntime, the error will point to the corresponding module name and line number.\nFor `case` expressions that ends with a wildcard pattern and a crash, it will\nalso show the value that snuck through. In our example, that'd be `Captain` or\n`Seagull`.\n\n**Use this if** you want to do some testing while you are partway through\nwriting a function.\n\n**Do not use this if** you want to do some typical try-catch exception handling.\nUse the [`Maybe`](Maybe) or [`Result`](Result) libraries instead.\n", "type": "String -> a"}, {"name": "log", "comment": " Log a tagged value on the developer console, and then return the value.\n\n    1 + log \"number\" 1        -- equals 2, logs \"number: 1\"\n    length (log \"start\" [])   -- equals 0, logs \"start: []\"\n\nNotice that `log` is not a pure function! It should *only* be used for\ninvestigating bugs or performance problems.\n", "type": "String -> a -> a"}], "generated-with-elm-version": "0.18.0"}, {"name": "Bitwise", "comment": " Library for [bitwise operations](http://en.wikipedia.org/wiki/Bitwise_operation).\n\n# Basic Operations\n@docs and, or, xor, complement\n\n# Bit Shifts\n@docs shiftLeftBy, shiftRightBy, shiftRightZfBy\n", "aliases": [], "types": [], "values": [{"name": "and", "comment": " Bitwise AND\n", "type": "Int -> Int -> Int"}, {"name": "complement", "comment": " Flip each bit individually, often called bitwise NOT\n", "type": "Int -> Int"}, {"name": "or", "comment": " Bitwise OR\n", "type": "Int -> Int -> Int"}, {"name": "shiftLeftBy", "comment": " Shift bits to the left by a given offset, filling new bits with zeros.\nThis can be used to multiply numbers by powers of two.\n\n    shiftLeftBy 1 5 == 10\n    shiftLeftBy 5 1 == 32\n", "type": "Int -> Int -> Int"}, {"name": "shiftRightBy", "comment": " Shift bits to the right by a given offset, filling new bits with\nwhatever is the topmost bit. This can be used to divide numbers by powers of two.\n\n    shiftRightBy 1  32 == 16\n    shiftRightBy 2  32 == 8\n    shiftRightBy 1 -32 == -16\n\nThis is called an [arithmetic right shift][ars], often written (>>), and\nsometimes called a sign-propagating right shift because it fills empty spots\nwith copies of the highest bit.\n\n[ars]: http://en.wikipedia.org/wiki/Bitwise_operation#Arithmetic_shift\n", "type": "Int -> Int -> Int"}, {"name": "shiftRightZfBy", "comment": " Shift bits to the right by a given offset, filling new bits with zeros.\n\n    shiftRightZfBy 1  32 == 16\n    shiftRightZfBy 2  32 == 8\n    shiftRightZfBy 1 -32 == 2147483632\n\nThis is called an [logical right shift][lrs], often written (>>>), and\nsometimes called a zero-fill right shift because it fills empty spots with\nzeros.\n\n[lrs]: http://en.wikipedia.org/wiki/Bitwise_operation#Logical_shift\n", "type": "Int -> Int -> Int"}, {"name": "xor", "comment": " Bitwise XOR\n", "type": "Int -> Int -> Int"}], "generated-with-elm-version": "0.18.0"}, {"name": "Basics", "comment": " Tons of useful functions that get imported by default.\n\n# Equality\n@docs (==), (/=)\n\n# Comparison\n\nThese functions only work on `comparable` types. This includes numbers,\ncharacters, strings, lists of comparable things, and tuples of comparable\nthings. Note that tuples with 7 or more elements are not comparable; why\nare your tuples so big?\n\n@docs (<), (>), (<=), (>=), max, min, Order, compare\n\n# Booleans\n@docs not, (&&), (||), xor\n\n# Mathematics\n@docs (+), (-), (*), (/), (^), (//), rem, (%), negate, abs, sqrt, clamp, logBase, e\n\n# Trigonometry\n@docs pi, cos, sin, tan, acos, asin, atan, atan2\n\n# Number Conversions\n@docs round, floor, ceiling, truncate, toFloat\n\n# Angle Conversions\nAll angle conversions result in &ldquo;standard Elm angles&rdquo;\nwhich happen to be radians.\n\n@docs degrees, radians, turns\n\n# Polar Coordinates\n@docs toPolar, fromPolar\n\n# Floating Point Checks\n@docs isNaN, isInfinite\n\n# Strings and Lists\n@docs toString, (++)\n\n# Higher-Order Helpers\n@docs identity, always, (<|), (|>), (<<), (>>), flip, curry, uncurry, Never, never\n\n", "aliases": [], "types": [{"name": "Never", "comment": " A value that can never happen! For context:\n\n  - The boolean type `Bool` has two values: `True` and `False`\n  - The unit type `()` has one value: `()`\n  - The never type `Never` has no values!\n\nYou may see it in the wild in `Html Never` which means this HTML will never\nproduce any messages. You would need to write an event handler like\n`onClick ??? : Attribute Never` but how can we fill in the question marks?!\nSo there cannot be any event handlers on that HTML.\n\nYou may also see this used with tasks that never fail, like `Task Never ()`.\n\nThe `Never` type is useful for restricting *arguments* to a function. Maybe my\nAPI can only accept HTML without event handlers, so I require `Html Never` and\nusers can give `Html msg` and everything will go fine. Generally speaking, you\ndo not want `Never` in your return types though.\n", "args": [], "cases": []}, {"name": "Order", "comment": " Represents the relative ordering of two things.\nThe relations are less than, equal to, and greater than.\n", "args": [], "cases": [["LT", []], ["EQ", []], ["GT", []]]}], "values": [{"name": "%", "comment": " Perform [modular arithmetic](http://en.wikipedia.org/wiki/Modular_arithmetic).\n\n     7 % 2 == 1\n    -1 % 4 == 3\n", "type": "Int -> Int -> Int", "associativity": "left", "precedence": 7}, {"name": "&&", "comment": " The logical AND operator. `True` if both inputs are `True`.\n\n**Note:** When used in the infix position, like `(left && right)`, the operator\nshort-circuits. This means if `left` is `False` we do not bother evaluating `right`\nand just return `False` overall.\n", "type": "Bool -> Bool -> Bool", "associativity": "right", "precedence": 3}, {"name": "*", "comment": "", "type": "number -> number -> number", "associativity": "left", "precedence": 7}, {"name": "+", "comment": "", "type": "number -> number -> number", "associativity": "left", "precedence": 6}, {"name": "++", "comment": " Put two appendable things together. This includes strings, lists, and text.\n\n    \"hello\" ++ \"world\" == \"helloworld\"\n    [1,1,2] ++ [3,5,8] == [1,1,2,3,5,8]\n", "type": "appendable -> appendable -> appendable", "associativity": "right", "precedence": 5}, {"name": "-", "comment": "", "type": "number -> number -> number", "associativity": "left", "precedence": 6}, {"name": "/", "comment": " Floating point division. ", "type": "Float -> Float -> Float", "associativity": "left", "precedence": 7}, {"name": "//", "comment": " Integer division. The remainder is discarded. ", "type": "Int -> Int -> Int", "associativity": "left", "precedence": 7}, {"name": "/=", "comment": " Check if values are not &ldquo;the same&rdquo;.\n\nSo `(a /= b)` is the same as `(not (a == b))`.\n", "type": "a -> a -> Bool", "associativity": "non", "precedence": 4}, {"name": "<", "comment": "", "type": "comparable -> comparable -> Bool", "associativity": "non", "precedence": 4}, {"name": "<<", "comment": " Function composition, passing results along in the suggested direction. For\nexample, the following code checks if the square root of a number is odd:\n\n    not << isEven << sqrt\n\nYou can think of this operator as equivalent to the following:\n\n    (g << f)  ==  (\\x -> g (f x))\n\nSo our example expands out to something like this:\n\n    \\n -> not (isEven (sqrt n))\n", "type": "(b -> c) -> (a -> b) -> a -> c", "associativity": "right", "precedence": 9}, {"name": "<=", "comment": "", "type": "comparable -> comparable -> Bool", "associativity": "non", "precedence": 4}, {"name": "<|", "comment": " Backward function application `f <| x == f x`. This function is useful for\navoiding parentheses. Consider the following code to create a text element:\n\n    leftAligned (monospace (fromString \"code\"))\n\nThis can also be written as:\n\n    leftAligned <| monospace <| fromString \"code\"\n", "type": "(a -> b) -> a -> b", "associativity": "right", "precedence": 0}, {"name": "==", "comment": " Check if values are &ldquo;the same&rdquo;.\n\n**Note:** Elm uses structural equality on tuples, records, and user-defined\nunion types. This means the values `(3, 4)` and `(3, 4)` are definitely equal.\nThis is not true in languages like JavaScript that use reference equality on\nobjects.\n\n**Note:** Equality (in the Elm sense) is not possible for certain types. For\nexample, the functions `(\\n -> n + 1)` and `(\\n -> 1 + n)` are &ldquo;the\nsame&rdquo; but detecting this in general is [undecidable][]. In a future\nrelease, the compiler will detect when `(==)` is used with problematic\ntypes and provide a helpful error message. This will require quite serious\ninfrastructure work that makes sense to batch with another big project, so the\nstopgap is to crash as quickly as possible. Problematic types include functions\nand JavaScript values like `Json.Encode.Value` which could contain functions\nif passed through a port.\n\n[undecidable]: https://en.wikipedia.org/wiki/Undecidable_problem\n", "type": "a -> a -> Bool", "associativity": "non", "precedence": 4}, {"name": ">", "comment": "", "type": "comparable -> comparable -> Bool", "associativity": "non", "precedence": 4}, {"name": ">=", "comment": "", "type": "comparable -> comparable -> Bool", "associativity": "non", "precedence": 4}, {"name": ">>", "comment": " Function composition, passing results along in the suggested direction. For\nexample, the following code checks if the square root of a number is odd:\n\n    sqrt >> isEven >> not\n\nThis direction of function composition seems less pleasant than `(<<)` which\nreads nicely in expressions like: `filter (not << isRegistered) students`\n", "type": "(a -> b) -> (b -> c) -> a -> c", "associativity": "left", "precedence": 9}, {"name": "^", "comment": " Exponentiation\n\n    3^2 == 9\n", "type": "number -> number -> number", "associativity": "right", "precedence": 8}, {"name": "abs", "comment": " Take the absolute value of a number. ", "type": "number -> number"}, {"name": "acos", "comment": "", "type": "Float -> Float"}, {"name": "always", "comment": " Create a function that *always* returns the same value. Useful with\nfunctions like `map`:\n\n    List.map (always 0) [1,2,3,4,5] == [0,0,0,0,0]\n\n    -- List.map (\\_ -> 0) [1,2,3,4,5] == [0,0,0,0,0]\n    -- always = (\\x _ -> x)\n", "type": "a -> b -> a"}, {"name": "asin", "comment": "", "type": "Float -> Float"}, {"name": "atan", "comment": " You probably do not want to use this. It takes `(y/x)` as the\nargument, so there is no way to know whether the negative signs comes from\nthe `y` or `x`. Thus, the resulting angle is always between &pi;/2 and -&pi;/2\n(in quadrants I and IV). You probably want to use `atan2` instead.\n", "type": "Float -> Float"}, {"name": "atan2", "comment": " This helps you find the angle of a Cartesian coordinate.\nYou will almost certainly want to use this instead of `atan`.\nSo `atan2 y x` computes *atan(y/x)* but also keeps track of which\nquadrant the angle should really be in. The result will be between\n&pi; and -&pi;, giving you the full range of angles.\n", "type": "Float -> Float -> Float"}, {"name": "ceiling", "comment": " Ceiling function, rounding up. ", "type": "Float -> Int"}, {"name": "clamp", "comment": " Clamps a number within a given range. With the expression\n`clamp 100 200 x` the results are as follows:\n\n    100     if x < 100\n     x      if 100 <= x < 200\n    200     if 200 <= x\n", "type": "number -> number -> number -> number"}, {"name": "compare", "comment": " Compare any two comparable values. Comparable values include `String`, `Char`,\n`Int`, `Float`, `Time`, or a list or tuple containing comparable values.\nThese are also the only values that work as `Dict` keys or `Set` members.\n", "type": "comparable -> comparable -> Basics.Order"}, {"name": "cos", "comment": "", "type": "Float -> Float"}, {"name": "curry", "comment": " Change how arguments are passed to a function.\nThis splits paired arguments into two separate arguments.\n", "type": "(( a, b ) -> c) -> a -> b -> c"}, {"name": "degrees", "comment": " Convert degrees to standard Elm angles (radians). ", "type": "Float -> Float"}, {"name": "e", "comment": " An approximation of e. ", "type": "Float"}, {"name": "flip", "comment": " Flip the order of the first two arguments to a function. ", "type": "(a -> b -> c) -> b -> a -> c"}, {"name": "floor", "comment": " Floor function, rounding down. ", "type": "Float -> Int"}, {"name": "fromPolar", "comment": " Convert polar coordinates (r,&theta;) to Cartesian coordinates (x,y). ", "type": "( Float, Float ) -> ( Float, Float )"}, {"name": "identity", "comment": " Given a value, returns exactly the same value. This is called\n[the identity function](http://en.wikipedia.org/wiki/Identity_function).\n", "type": "a -> a"}, {"name": "isInfinite", "comment": " Determine whether a float is positive or negative infinity.\n\n    isInfinite (0/0)     == False\n    isInfinite (sqrt -1) == False\n    isInfinite (1/0)     == True\n    isInfinite 1         == False\n\nNotice that NaN is not infinite! For float `n` to be finite implies that\n`not (isInfinite n || isNaN n)` evaluates to `True`.\n", "type": "Float -> Bool"}, {"name": "isNaN", "comment": " Determine whether a float is an undefined or unrepresentable number.\nNaN stands for *not a number* and it is [a standardized part of floating point\nnumbers](http://en.wikipedia.org/wiki/NaN).\n\n    isNaN (0/0)     == True\n    isNaN (sqrt -1) == True\n    isNaN (1/0)     == False  -- infinity is a number\n    isNaN 1         == False\n", "type": "Float -> Bool"}, {"name": "logBase", "comment": " Calculate the logarithm of a number with a given base.\n\n    logBase 10 100 == 2\n    logBase 2 256 == 8\n", "type": "Float -> Float -> Float"}, {"name": "max", "comment": " Find the larger of two comparables. ", "type": "comparable -> comparable -> comparable"}, {"name": "min", "comment": " Find the smaller of two comparables. ", "type": "comparable -> comparable -> comparable"}, {"name": "negate", "comment": " Negate a number.\n\n    negate 42 == -42\n    negate -42 == 42\n    negate 0 == 0\n", "type": "number -> number"}, {"name": "never", "comment": " A function that can never be called. Seems extremely pointless, but it\n*can* come in handy. Imagine you have some HTML that should never produce any\nmessages. And say you want to use it in some other HTML that *does* produce\nmessages. You could say:\n\n    import Html exposing (..)\n\n    embedHtml : Html Never -> Html msg\n    embedHtml staticStuff =\n      div []\n        [ text \"hello\"\n        , Html.map never staticStuff\n        ]\n\nSo the `never` function is basically telling the type system, make sure no one\never calls me!\n", "type": "Basics.Never -> a"}, {"name": "not", "comment": " Negate a boolean value.\n\n    not True == False\n    not False == True\n", "type": "Bool -> Bool"}, {"name": "pi", "comment": " An approximation of pi. ", "type": "Float"}, {"name": "radians", "comment": " Convert radians to standard Elm angles (radians). ", "type": "Float -> Float"}, {"name": "rem", "comment": " Find the remainder after dividing one number by another.\n\n    rem 11 4 == 3\n    rem 12 4 == 0\n    rem 13 4 == 1\n    rem -1 4 == -1\n", "type": "Int -> Int -> Int"}, {"name": "round", "comment": " Round a number to the nearest integer. ", "type": "Float -> Int"}, {"name": "sin", "comment": "", "type": "Float -> Float"}, {"name": "sqrt", "comment": " Take the square root of a number. ", "type": "Float -> Float"}, {"name": "tan", "comment": "", "type": "Float -> Float"}, {"name": "toFloat", "comment": " Convert an integer into a float. ", "type": "Int -> Float"}, {"name": "toPolar", "comment": " Convert Cartesian coordinates (x,y) to polar coordinates (r,&theta;). ", "type": "( Float, Float ) -> ( Float, Float )"}, {"name": "toString", "comment": " Turn any kind of value into a string. When you view the resulting string\nwith `Text.fromString` it should look just like the value it came from.\n\n    toString 42 == \"42\"\n    toString [1,2] == \"[1,2]\"\n    toString \"he said, \\\"hi\\\"\" == \"\\\"he said, \\\\\\\"hi\\\\\\\"\\\"\"\n", "type": "a -> String"}, {"name": "truncate", "comment": " Truncate a number, rounding towards zero. ", "type": "Float -> Int"}, {"name": "turns", "comment": " Convert turns to standard Elm angles (radians).\nOne turn is equal to 360&deg;.\n", "type": "Float -> Float"}, {"name": "uncurry", "comment": " Change how arguments are passed to a function.\nThis combines two arguments into a single pair.\n", "type": "(a -> b -> c) -> ( a, b ) -> c"}, {"name": "xor", "comment": " The exclusive-or operator. `True` if exactly one input is `True`. ", "type": "Bool -> Bool -> Bool"}, {"name": "|>", "comment": " Forward function application `x |> f == f x`. This function is useful\nfor avoiding parentheses and writing code in a more natural way.\nConsider the following code to create a pentagon:\n\n    scale 2 (move (10,10) (filled blue (ngon 5 30)))\n\nThis can also be written as:\n\n    ngon 5 30\n      |> filled blue\n      |> move (10,10)\n      |> scale 2\n", "type": "a -> (a -> b) -> b", "associativity": "left", "precedence": 0}, {"name": "||", "comment": " The logical OR operator. `True` if one or both inputs are `True`.\n\n**Note:** When used in the infix position, like `(left || right)`, the operator\nshort-circuits. This means if `left` is `True` we do not bother evaluating `right`\nand just return `True` overall.\n", "type": "Bool -> Bool -> Bool", "associativity": "right", "precedence": 2}], "generated-with-elm-version": "0.18.0"}]}, {"name": "elm-lang/http", "modules": [{"name": "Http.Progress", "comment": " Track the progress of an HTTP request. This can be useful if you are\nrequesting a large amount of data and want to show the user a progress bar\nor something.\n\nHere is an example usage: [demo][] and [code][].\n\n[demo]: https://hirafuji.com.br/elm/http-progress-example/\n[code]: https://gist.github.com/pablohirafuji/fa373d07c42016756d5bca28962008c4\n\n**Note:** If you stop tracking progress, you cancel the request.\n\n# Progress\n@docs Progress, track\n\n", "aliases": [], "types": [{"name": "Progress", "comment": " The progress of an HTTP request.\n\nYou start with `None`. As data starts to come in, you will see `Some`. The\n`bytesExpected` field will match the `Content-Length` header, indicating how\nlong the response body is in bytes (8-bits). The `bytes` field indicates how\nmany bytes have been loaded so far, so if you want progress as a percentage,\nyou would say:\n\n    Some { bytes, bytesExpected } ->\n      toFloat bytes / toFloat bytesExpected\n\nYou will end up with `Fail` or `Done` depending on the success of the request.\n", "args": ["data"], "cases": [["None", []], ["Some", ["{ bytes : Int, bytesExpected : Int }"]], ["Fail", ["Http.Error"]], ["Done", ["data"]]]}], "values": [{"name": "track", "comment": " Create a subscription that tracks the progress of an HTTP request.\n\nSee it in action in this example: [demo][] and [code][].\n\n[demo]: https://hirafuji.com.br/elm/http-progress-example/\n[code]: https://gist.github.com/pablohirafuji/fa373d07c42016756d5bca28962008c4\n", "type": "String -> (Http.Progress.Progress data -> msg) -> Http.Request data -> Platform.Sub.Sub msg"}], "generated-with-elm-version": "0.18.0"}, {"name": "Http", "comment": " Create and send HTTP requests.\n\n# Send Requests\n@docs Request, send, Error\n\n# GET\n@docs getString, get\n\n# POST\n@docs post\n\n# Custom Requests\n@docs request\n\n## Headers\n@docs Header, header\n\n## Request Bodies\n@docs Body, emptyBody, jsonBody, stringBody, multipartBody, Part, stringPart\n\n## Responses\n@docs Expect, expectString, expectJson, expectStringResponse, Response\n\n# Low-Level\n@docs encodeUri, decodeUri, toTask\n\n", "aliases": [{"name": "Body", "comment": " Represents the body of a `Request`.\n", "args": [], "type": "Http.Internal.Body"}, {"name": "Expect", "comment": " Logic for interpreting a response body.\n", "args": ["a"], "type": "Http.Internal.Expect a"}, {"name": "Header", "comment": " An HTTP header for configuring requests. See a bunch of common headers\n[here][].\n\n[here]: https://en.wikipedia.org/wiki/List_of_HTTP_header_fields\n", "args": [], "type": "Http.Internal.Header"}, {"name": "Request", "comment": " Describes an HTTP request.\n", "args": ["a"], "type": "Http.Internal.Request a"}, {"name": "Response", "comment": " The response from a `Request`.\n", "args": ["body"], "type": "{ url : String , status : { code : Int, message : String } , headers : Dict.Dict String String , body : body }"}], "types": [{"name": "Error", "comment": " A `Request` can fail in a couple ways:\n\n  - `BadUrl` means you did not provide a valid URL.\n  - `Timeout` means it took too long to get a response.\n  - `NetworkError` means the user turned off their wifi, went in a cave, etc.\n  - `BadStatus` means you got a response back, but the [status code][sc]\n    indicates failure.\n  - `BadPayload` means you got a response back with a nice status code, but\n    the body of the response was something unexpected. The `String` in this\n    case is a debugging message that explains what went wrong with your JSON\n    decoder or whatever.\n\n[sc]: https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\n", "args": [], "cases": [["BadUrl", ["String"]], ["Timeout", []], ["NetworkError", []], ["BadStatus", ["Http.Response String"]], ["BadPayload", ["String", "Http.Response String"]]]}, {"name": "Part", "comment": " Contents of a multi-part body. Right now it only supports strings, but we\nwill support blobs and files when we get an API for them in Elm.\n", "args": [], "cases": []}], "values": [{"name": "decodeUri", "comment": " Use this to unescape query parameters. It converts things like `%2F` to\n`/`. It can fail in some cases. For example, there is no way to unescape `%`\nbecause it could never appear alone in a properly escaped string.\n\nIt works just like `decodeURIComponent` in JavaScript.\n", "type": "String -> Maybe.Maybe String"}, {"name": "emptyBody", "comment": " Create an empty body for your `Request`. This is useful for GET requests\nand POST requests where you are not sending any data.\n", "type": "Http.Body"}, {"name": "encodeUri", "comment": " Use this to escape query parameters. Converts characters like `/` to `%2F`\nso that it does not clash with normal URL\n\nIt work just like `encodeURIComponent` in JavaScript.\n", "type": "String -> String"}, {"name": "expectJson", "comment": " Expect the response body to be JSON. You provide a `Decoder` to turn that\nJSON into an Elm value. If the body cannot be parsed as JSON or if the JSON\ndoes not match the decoder, the request will resolve to a `BadPayload` error.\n", "type": "Json.Decode.Decoder a -> Http.Expect a"}, {"name": "expectString", "comment": " Expect the response body to be a `String`.\n", "type": "Http.Expect String"}, {"name": "expectStringResponse", "comment": " Maybe you want the whole `Response`: status code, headers, body, etc. This\nlets you get all of that information. From there you can use functions like\n`Json.Decode.decodeString` to interpret it as JSON or whatever else you want.\n", "type": "(Http.Response String -> Result.Result String a) -> Http.Expect a"}, {"name": "get", "comment": " Create a `GET` request and try to decode the response body from JSON to\nsome Elm value.\n\n    import Http\n    import Json.Decode exposing (list, string)\n\n    getBooks : Http.Request (List String)\n    getBooks =\n      Http.get \"https://example.com/books\" (list string)\n\nYou can learn more about how JSON decoders work [here][] in the guide.\n\n[here]: https://guide.elm-lang.org/interop/json.html\n", "type": "String -> Json.Decode.Decoder a -> Http.Request a"}, {"name": "getString", "comment": " Create a `GET` request and interpret the response body as a `String`.\n\n    import Http\n\n    getWarAndPeace : Http.Request String\n    getWarAndPeace =\n      Http.getString \"https://example.com/books/war-and-peace\"\n", "type": "String -> Http.Request String"}, {"name": "header", "comment": " Create a `Header`.\n\n    header \"If-Modified-Since\" \"Sat 29 Oct 1994 19:43:31 GMT\"\n    header \"Max-Forwards\" \"10\"\n    header \"X-Requested-With\" \"XMLHttpRequest\"\n\n**Note:** In the future, we may split this out into an `Http.Headers` module\nand provide helpers for cases that are common on the client-side. If this\nsounds nice to you, open an issue [here][] describing the helper you want and\nwhy you need it.\n\n[here]: https://github.com/elm-lang/http/issues\n", "type": "String -> String -> Http.Header"}, {"name": "jsonBody", "comment": " Put some JSON value in the body of your `Request`. This will automatically\nadd the `Content-Type: application/json` header.\n", "type": "Json.Encode.Value -> Http.Body"}, {"name": "multipartBody", "comment": " Create multi-part bodies for your `Request`, automatically adding the\n`Content-Type: multipart/form-data` header.\n", "type": "List Http.Part -> Http.Body"}, {"name": "post", "comment": " Create a `POST` request and try to decode the response body from JSON to\nan Elm value. For example, if we want to send a POST without any data in the\nrequest body, it would be like this:\n\n    import Http\n    import Json.Decode exposing (list, string)\n\n    postBooks : Http.Request (List String)\n    postBooks =\n      Http.post \"https://example.com/books\" Http.emptyBody (list string)\n\nSee [`jsonBody`](#jsonBody) to learn how to have a more interesting request\nbody. And check out [this section][here] of the guide to learn more about\nJSON decoders.\n\n[here]: https://guide.elm-lang.org/interop/json.html\n\n", "type": "String -> Http.Body -> Json.Decode.Decoder a -> Http.Request a"}, {"name": "request", "comment": " Create a custom request. For example, a custom PUT request would look like\nthis:\n\n    put : String -> Body -> Request ()\n    put url body =\n      request\n        { method = \"PUT\"\n        , headers = []\n        , url = url\n        , body = body\n        , expect = expectStringResponse (\\_ -> Ok ())\n        , timeout = Nothing\n        , withCredentials = False\n        }\n", "type": "{ method : String , headers : List Http.Header , url : String , body : Http.Body , expect : Http.Expect a , timeout : Maybe.Maybe Time.Time , withCredentials : Bool } -> Http.Request a"}, {"name": "send", "comment": " Send a `Request`. We could get the text of \u201cWar and Peace\u201d like this:\n\n    import Http\n\n    type Msg = Click | NewBook (Result Http.Error String)\n\n    update : Msg -> Model -> Model\n    update msg model =\n      case msg of\n        Click ->\n          ( model, getWarAndPeace )\n\n        NewBook (Ok book) ->\n          ...\n\n        NewBook (Err _) ->\n          ...\n\n    getWarAndPeace : Cmd Msg\n    getWarAndPeace =\n      Http.send NewBook <|\n        Http.getString \"https://example.com/books/war-and-peace.md\"\n", "type": "(Result.Result Http.Error a -> msg) -> Http.Request a -> Platform.Cmd.Cmd msg"}, {"name": "stringBody", "comment": " Put some string in the body of your `Request`. Defining `jsonBody` looks\nlike this:\n\n    import Json.Encode as Encode\n\n    jsonBody : Encode.Value -> Body\n    jsonBody value =\n      stringBody \"application/json\" (Encode.encode 0 value)\n\nNotice that the first argument is a [MIME type][mime] so we know to add\n`Content-Type: application/json` to our request headers. Make sure your\nMIME type matches your data. Some servers are strict about this!\n\n[mime]: https://en.wikipedia.org/wiki/Media_type\n", "type": "String -> String -> Http.Body"}, {"name": "stringPart", "comment": " A named chunk of string data.\n\n    body =\n      multipartBody\n        [ stringPart \"user\" \"tom\"\n        , stringPart \"payload\" \"42\"\n        ]\n", "type": "String -> String -> Http.Part"}, {"name": "toTask", "comment": " Convert a `Request` into a `Task`. This is only really useful if you want\nto chain together a bunch of requests (or any other tasks) in a single command.\n", "type": "Http.Request a -> Task.Task Http.Error a"}], "generated-with-elm-version": "0.18.0"}]}, {"name": "elm-lang/html", "modules": [{"name": "Html.Lazy", "comment": " Since all Elm functions are pure we have a guarantee that the same input\nwill always result in the same output. This module gives us tools to be lazy\nabout building `Html` that utilize this fact.\n\nRather than immediately applying functions to their arguments, the `lazy`\nfunctions just bundle the function and arguments up for later. When diffing\nthe old and new virtual DOM, it checks to see if all the arguments are equal.\nIf so, it skips calling the function!\n\nThis is a really cheap test and often makes things a lot faster, but definitely\nbenchmark to be sure!\n\n@docs lazy, lazy2, lazy3\n", "aliases": [], "types": [], "values": [{"name": "lazy", "comment": " A performance optimization that delays the building of virtual DOM nodes.\n\nCalling `(view model)` will definitely build some virtual DOM, perhaps a lot of\nit. Calling `(lazy view model)` delays the call until later. During diffing, we\ncan check to see if `model` is referentially equal to the previous value used,\nand if so, we just stop. No need to build up the tree structure and diff it,\nwe know if the input to `view` is the same, the output must be the same!\n", "type": "(a -> Html.Html msg) -> a -> Html.Html msg"}, {"name": "lazy2", "comment": " Same as `lazy` but checks on two arguments.\n", "type": "(a -> b -> Html.Html msg) -> a -> b -> Html.Html msg"}, {"name": "lazy3", "comment": " Same as `lazy` but checks on three arguments.\n", "type": "(a -> b -> c -> Html.Html msg) -> a -> b -> c -> Html.Html msg"}], "generated-with-elm-version": "0.18.0"}, {"name": "Html.Attributes", "comment": " Helper functions for HTML attributes. They are organized roughly by\ncategory. Each attribute is labeled with the HTML tags it can be used with, so\njust search the page for `video` if you want video stuff.\n\nIf you cannot find what you are looking for, go to the [Custom\nAttributes](#custom-attributes) section to learn how to create new helpers.\n\n# Primitives\n@docs style, property, attribute, map\n\n# Super Common Attributes\n@docs class, classList, id, title, hidden\n\n# Inputs\n@docs type_, value, defaultValue, checked, placeholder, selected\n\n## Input Helpers\n@docs accept, acceptCharset, action, autocomplete, autofocus,\n    disabled, enctype, formaction, list, maxlength, minlength, method, multiple,\n    name, novalidate, pattern, readonly, required, size, for, form\n\n## Input Ranges\n@docs max, min, step\n\n## Input Text Areas\n@docs cols, rows, wrap\n\n\n# Links and Areas\n@docs href, target, download, downloadAs, hreflang, media, ping, rel\n\n## Maps\n@docs ismap, usemap, shape, coords\n\n\n# Embedded Content\n@docs src, height, width, alt\n\n## Audio and Video\n@docs autoplay, controls, loop, preload, poster, default, kind, srclang\n\n## iframes\n@docs sandbox, seamless, srcdoc\n\n# Ordered Lists\n@docs reversed, start\n\n# Tables\n@docs align, colspan, rowspan, headers, scope\n\n# Header Stuff\n@docs async, charset, content, defer, httpEquiv, language, scoped\n\n# Less Common Global Attributes\nAttributes that can be attached to any HTML tag but are less commonly used.\n@docs accesskey, contenteditable, contextmenu, dir, draggable, dropzone,\n      itemprop, lang, spellcheck, tabindex\n\n# Key Generation\n@docs challenge, keytype\n\n# Miscellaneous\n@docs cite, datetime, pubdate, manifest\n\n", "aliases": [], "types": [], "values": [{"name": "accept", "comment": " List of types the server accepts, typically a file type.\nFor `form` and `input`.\n", "type": "String -> Html.Attribute msg"}, {"name": "acceptCharset", "comment": " List of supported charsets in a `form`.\n", "type": "String -> Html.Attribute msg"}, {"name": "accesskey", "comment": " Defines a keyboard shortcut to activate or add focus to the element. ", "type": "Char -> Html.Attribute msg"}, {"name": "action", "comment": " The URI of a program that processes the information submitted via a `form`.\n", "type": "String -> Html.Attribute msg"}, {"name": "align", "comment": " Specifies the horizontal alignment of a `caption`, `col`, `colgroup`,\n`hr`, `iframe`, `img`, `table`, `tbody`,  `td`,  `tfoot`, `th`, `thead`, or\n`tr`.\n", "type": "String -> Html.Attribute msg"}, {"name": "alt", "comment": " Alternative text in case an image can't be displayed. Works with `img`,\n`area`, and `input`.\n", "type": "String -> Html.Attribute msg"}, {"name": "async", "comment": " Indicates that the `script` should be executed asynchronously. ", "type": "Bool -> Html.Attribute msg"}, {"name": "attribute", "comment": " Create *attributes*, like saying `domNode.setAttribute('class', 'greeting')`\nin JavaScript.\n\n    class : String -> Attribute msg\n    class name =\n      attribute \"class\" name\n\nRead more about the difference between properties and attributes [here][].\n\n[here]: https://github.com/elm-lang/html/blob/master/properties-vs-attributes.md\n", "type": "String -> String -> Html.Attribute msg"}, {"name": "autocomplete", "comment": " Indicates whether a `form` or an `input` can have their values automatically\ncompleted by the browser.\n", "type": "Bool -> Html.Attribute msg"}, {"name": "autofocus", "comment": " The element should be automatically focused after the page loaded.\nFor `button`, `input`, `keygen`, `select`, and `textarea`.\n", "type": "Bool -> Html.Attribute msg"}, {"name": "autoplay", "comment": " The `audio` or `video` should play as soon as possible. ", "type": "Bool -> Html.Attribute msg"}, {"name": "challenge", "comment": " A challenge string that is submitted along with the public key in a `keygen`.\n", "type": "String -> Html.Attribute msg"}, {"name": "charset", "comment": " Declares the character encoding of the page or script. Common values include:\n\n  * UTF-8 - Character encoding for Unicode\n  * ISO-8859-1 - Character encoding for the Latin alphabet\n\nFor `meta` and `script`.\n", "type": "String -> Html.Attribute msg"}, {"name": "checked", "comment": " Indicates whether an `input` of type checkbox is checked. ", "type": "Bool -> Html.Attribute msg"}, {"name": "cite", "comment": " Contains a URI which points to the source of the quote or change in a\n`blockquote`, `del`, `ins`, or `q`.\n", "type": "String -> Html.Attribute msg"}, {"name": "class", "comment": " Often used with CSS to style elements with common properties. ", "type": "String -> Html.Attribute msg"}, {"name": "classList", "comment": " This function makes it easier to build a space-separated class attribute.\nEach class can easily be added and removed depending on the boolean value it\nis paired with. For example, maybe we want a way to view notices:\n\n    viewNotice : Notice -> Html msg\n    viewNotice notice =\n      div\n        [ classList\n            [ (\"notice\", True)\n            , (\"notice-important\", notice.isImportant)\n            , (\"notice-seen\", notice.isSeen)\n            ]\n        ]\n        [ text notice.content ]\n", "type": "List ( String, Bool ) -> Html.Attribute msg"}, {"name": "cols", "comment": " Defines the number of columns in a `textarea`. ", "type": "Int -> Html.Attribute msg"}, {"name": "colspan", "comment": " The colspan attribute defines the number of columns a cell should span.\nFor `td` and `th`.\n", "type": "Int -> Html.Attribute msg"}, {"name": "content", "comment": " A value associated with http-equiv or name depending on the context. For\n`meta`.\n", "type": "String -> Html.Attribute msg"}, {"name": "contenteditable", "comment": " Indicates whether the element's content is editable. ", "type": "Bool -> Html.Attribute msg"}, {"name": "contextmenu", "comment": " Defines the ID of a `menu` element which will serve as the element's\ncontext menu.\n", "type": "String -> Html.Attribute msg"}, {"name": "controls", "comment": " Indicates whether the browser should show playback controls for the `audio`\nor `video`.\n", "type": "Bool -> Html.Attribute msg"}, {"name": "coords", "comment": " A set of values specifying the coordinates of the hot-spot region in an\n`area`. Needs to be paired with a `shape` attribute to be meaningful.\n", "type": "String -> Html.Attribute msg"}, {"name": "datetime", "comment": " Indicates the date and time associated with the element.\nFor `del`, `ins`, `time`.\n", "type": "String -> Html.Attribute msg"}, {"name": "default", "comment": " Indicates that the `track` should be enabled unless the user's preferences\nindicate something different.\n", "type": "Bool -> Html.Attribute msg"}, {"name": "defaultValue", "comment": " Defines an initial value which will be displayed in an `input` when that\n`input` is added to the DOM. Unlike `value`, altering `defaultValue` after the\n`input` element has been added to the DOM has no effect.\n", "type": "String -> Html.Attribute msg"}, {"name": "defer", "comment": " Indicates that a `script` should be executed after the page has been\nparsed.\n", "type": "Bool -> Html.Attribute msg"}, {"name": "dir", "comment": " Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl\n(Right-To-Left).\n", "type": "String -> Html.Attribute msg"}, {"name": "disabled", "comment": " Indicates whether the user can interact with a `button`, `fieldset`,\n`input`, `keygen`, `optgroup`, `option`, `select` or `textarea`.\n", "type": "Bool -> Html.Attribute msg"}, {"name": "download", "comment": " Indicates that clicking an `a` and `area` will download the resource\ndirectly.\n", "type": "Bool -> Html.Attribute msg"}, {"name": "downloadAs", "comment": " Indicates that clicking an `a` and `area` will download the resource\ndirectly, and that the downloaded resource with have the given filename.\n", "type": "String -> Html.Attribute msg"}, {"name": "draggable", "comment": " Defines whether the element can be dragged. ", "type": "String -> Html.Attribute msg"}, {"name": "dropzone", "comment": " Indicates that the element accept the dropping of content on it. ", "type": "String -> Html.Attribute msg"}, {"name": "enctype", "comment": " How `form` data should be encoded when submitted with the POST method.\nOptions include: application/x-www-form-urlencoded, multipart/form-data, and\ntext/plain.\n", "type": "String -> Html.Attribute msg"}, {"name": "for", "comment": " The element ID described by this `label` or the element IDs that are used\nfor an `output`.\n", "type": "String -> Html.Attribute msg"}, {"name": "form", "comment": " Indicates the element ID of the `form` that owns this particular `button`,\n`fieldset`, `input`, `keygen`, `label`, `meter`, `object`, `output`,\n`progress`, `select`, or `textarea`.\n", "type": "String -> Html.Attribute msg"}, {"name": "formaction", "comment": " Indicates the action of an `input` or `button`. This overrides the action\ndefined in the surrounding `form`.\n", "type": "String -> Html.Attribute msg"}, {"name": "headers", "comment": " A space separated list of element IDs indicating which `th` elements are\nheaders for this cell. For `td` and `th`.\n", "type": "String -> Html.Attribute msg"}, {"name": "height", "comment": " Declare the height of a `canvas`, `embed`, `iframe`, `img`, `input`,\n`object`, or `video`.\n", "type": "Int -> Html.Attribute msg"}, {"name": "hidden", "comment": " Indicates the relevance of an element. ", "type": "Bool -> Html.Attribute msg"}, {"name": "href", "comment": " The URL of a linked resource, such as `a`, `area`, `base`, or `link`. ", "type": "String -> Html.Attribute msg"}, {"name": "hreflang", "comment": " Two-letter language code of the linked resource of an `a`, `area`, or `link`.\n", "type": "String -> Html.Attribute msg"}, {"name": "httpEquiv", "comment": " This attribute is an indicator that is paired with the `content` attribute,\nindicating what that content means. `httpEquiv` can take on three different\nvalues: content-type, default-style, or refresh. For `meta`.\n", "type": "String -> Html.Attribute msg"}, {"name": "id", "comment": " Often used with CSS to style a specific element. The value of this\nattribute must be unique.\n", "type": "String -> Html.Attribute msg"}, {"name": "ismap", "comment": " When an `img` is a descendent of an `a` tag, the `ismap` attribute\nindicates that the click location should be added to the parent `a`'s href as\na query string.\n", "type": "Bool -> Html.Attribute msg"}, {"name": "itemprop", "comment": "", "type": "String -> Html.Attribute msg"}, {"name": "keytype", "comment": " Specifies the type of key generated by a `keygen`. Possible values are:\nrsa, dsa, and ec.\n", "type": "String -> Html.Attribute msg"}, {"name": "kind", "comment": " Specifies the kind of text `track`. ", "type": "String -> Html.Attribute msg"}, {"name": "lang", "comment": " Defines the language used in the element. ", "type": "String -> Html.Attribute msg"}, {"name": "language", "comment": " Defines the script language used in a `script`. ", "type": "String -> Html.Attribute msg"}, {"name": "list", "comment": " Associates an `input` with a `datalist` tag. The datalist gives some\npre-defined options to suggest to the user as they interact with an input.\nThe value of the list attribute must match the id of a `datalist` node.\nFor `input`.\n", "type": "String -> Html.Attribute msg"}, {"name": "loop", "comment": " Indicates whether the `audio` or `video` should start playing from the\nstart when it's finished.\n", "type": "Bool -> Html.Attribute msg"}, {"name": "manifest", "comment": " Specifies the URL of the cache manifest for an `html` tag. ", "type": "String -> Html.Attribute msg"}, {"name": "map", "comment": " Transform the messages produced by an `Attribute`.\n", "type": "(a -> msg) -> Html.Attribute a -> Html.Attribute msg"}, {"name": "max", "comment": " Indicates the maximum value allowed. When using an input of type number or\ndate, the max value must be a number or date. For `input`, `meter`, and `progress`.\n", "type": "String -> Html.Attribute msg"}, {"name": "maxlength", "comment": " Defines the maximum number of characters allowed in an `input` or\n`textarea`.\n", "type": "Int -> Html.Attribute msg"}, {"name": "media", "comment": " Specifies a hint of the target media of a `a`, `area`, `link`, `source`,\nor `style`.\n", "type": "String -> Html.Attribute msg"}, {"name": "method", "comment": " Defines which HTTP method to use when submitting a `form`. Can be GET\n(default) or POST.\n", "type": "String -> Html.Attribute msg"}, {"name": "min", "comment": " Indicates the minimum value allowed. When using an input of type number or\ndate, the min value must be a number or date. For `input` and `meter`.\n", "type": "String -> Html.Attribute msg"}, {"name": "minlength", "comment": " Defines the minimum number of characters allowed in an `input` or\n`textarea`.\n", "type": "Int -> Html.Attribute msg"}, {"name": "multiple", "comment": " Indicates whether multiple values can be entered in an `input` of type\nemail or file. Can also indicate that you can `select` many options.\n", "type": "Bool -> Html.Attribute msg"}, {"name": "name", "comment": " Name of the element. For example used by the server to identify the fields\nin form submits. For `button`, `form`, `fieldset`, `iframe`, `input`, `keygen`,\n`object`, `output`, `select`, `textarea`, `map`, `meta`, and `param`.\n", "type": "String -> Html.Attribute msg"}, {"name": "novalidate", "comment": " This attribute indicates that a `form` shouldn't be validated when\nsubmitted.\n", "type": "Bool -> Html.Attribute msg"}, {"name": "pattern", "comment": " Defines a regular expression which an `input`'s value will be validated\nagainst.\n", "type": "String -> Html.Attribute msg"}, {"name": "ping", "comment": " Specify a URL to send a short POST request to when the user clicks on an\n`a` or `area`. Useful for monitoring and tracking.\n", "type": "String -> Html.Attribute msg"}, {"name": "placeholder", "comment": " Provides a hint to the user of what can be entered into an `input` or\n`textarea`.\n", "type": "String -> Html.Attribute msg"}, {"name": "poster", "comment": " A URL indicating a poster frame to show until the user plays or seeks the\n`video`.\n", "type": "String -> Html.Attribute msg"}, {"name": "preload", "comment": " Control how much of an `audio` or `video` resource should be preloaded. ", "type": "String -> Html.Attribute msg"}, {"name": "property", "comment": " Create *properties*, like saying `domNode.className = 'greeting'` in\nJavaScript.\n\n    import Json.Encode as Encode\n\n    class : String -> Attribute msg\n    class name =\n      property \"className\" (Encode.string name)\n\nRead more about the difference between properties and attributes [here][].\n\n[here]: https://github.com/elm-lang/html/blob/master/properties-vs-attributes.md\n", "type": "String -> Json.Encode.Value -> Html.Attribute msg"}, {"name": "pubdate", "comment": " Indicates whether this date and time is the date of the nearest `article`\nancestor element. For `time`.\n", "type": "String -> Html.Attribute msg"}, {"name": "readonly", "comment": " Indicates whether an `input` or `textarea` can be edited. ", "type": "Bool -> Html.Attribute msg"}, {"name": "rel", "comment": " Specifies the relationship of the target object to the link object.\nFor `a`, `area`, `link`.\n", "type": "String -> Html.Attribute msg"}, {"name": "required", "comment": " Indicates whether this element is required to fill out or not.\nFor `input`, `select`, and `textarea`.\n", "type": "Bool -> Html.Attribute msg"}, {"name": "reversed", "comment": " Indicates whether an ordered list `ol` should be displayed in a descending\norder instead of a ascending.\n", "type": "Bool -> Html.Attribute msg"}, {"name": "rows", "comment": " Defines the number of rows in a `textarea`. ", "type": "Int -> Html.Attribute msg"}, {"name": "rowspan", "comment": " Defines the number of rows a table cell should span over.\nFor `td` and `th`.\n", "type": "Int -> Html.Attribute msg"}, {"name": "sandbox", "comment": " A space separated list of security restrictions you'd like to lift for an\n`iframe`.\n", "type": "String -> Html.Attribute msg"}, {"name": "scope", "comment": " Specifies the scope of a header cell `th`. Possible values are: col, row,\ncolgroup, rowgroup.\n", "type": "String -> Html.Attribute msg"}, {"name": "scoped", "comment": " Indicates that a `style` should only apply to its parent and all of the\nparents children.\n", "type": "Bool -> Html.Attribute msg"}, {"name": "seamless", "comment": "  Make an `iframe` look like part of the containing document. ", "type": "Bool -> Html.Attribute msg"}, {"name": "selected", "comment": " Defines which `option` will be selected on page load. ", "type": "Bool -> Html.Attribute msg"}, {"name": "shape", "comment": " Declare the shape of the clickable area in an `a` or `area`. Valid values\ninclude: default, rect, circle, poly. This attribute can be paired with\n`coords` to create more particular shapes.\n", "type": "String -> Html.Attribute msg"}, {"name": "size", "comment": " For `input` specifies the width of an input in characters.\n\nFor `select` specifies the number of visible options in a drop-down list.\n", "type": "Int -> Html.Attribute msg"}, {"name": "spellcheck", "comment": " Indicates whether spell checking is allowed for the element. ", "type": "Bool -> Html.Attribute msg"}, {"name": "src", "comment": " The URL of the embeddable content. For `audio`, `embed`, `iframe`, `img`,\n`input`, `script`, `source`, `track`, and `video`.\n", "type": "String -> Html.Attribute msg"}, {"name": "srcdoc", "comment": " An HTML document that will be displayed as the body of an `iframe`. It will\noverride the content of the `src` attribute if it has been specified.\n", "type": "String -> Html.Attribute msg"}, {"name": "srclang", "comment": " A two letter language code indicating the language of the `track` text data.\n", "type": "String -> Html.Attribute msg"}, {"name": "start", "comment": " Defines the first number of an ordered list if you want it to be something\nbesides 1.\n", "type": "Int -> Html.Attribute msg"}, {"name": "step", "comment": " Add a step size to an `input`. Use `step \"any\"` to allow any floating-point\nnumber to be used in the input.\n", "type": "String -> Html.Attribute msg"}, {"name": "style", "comment": " Specify a list of styles.\n\n    myStyle : Attribute msg\n    myStyle =\n      style\n        [ (\"backgroundColor\", \"red\")\n        , (\"height\", \"90px\")\n        , (\"width\", \"100%\")\n        ]\n\n    greeting : Html msg\n    greeting =\n      div [ myStyle ] [ text \"Hello!\" ]\n\nThere is no `Html.Styles` module because best practices for working with HTML\nsuggest that this should primarily be specified in CSS files. So the general\nrecommendation is to use this function lightly.\n", "type": "List ( String, String ) -> Html.Attribute msg"}, {"name": "tabindex", "comment": " Overrides the browser's default tab order and follows the one specified\ninstead.\n", "type": "Int -> Html.Attribute msg"}, {"name": "target", "comment": " Specify where the results of clicking an `a`, `area`, `base`, or `form`\nshould appear. Possible special values include:\n\n  * _blank &mdash; a new window or tab\n  * _self &mdash; the same frame (this is default)\n  * _parent &mdash; the parent frame\n  * _top &mdash; the full body of the window\n\nYou can also give the name of any `frame` you have created.\n", "type": "String -> Html.Attribute msg"}, {"name": "title", "comment": " Text to be displayed in a tooltip when hovering over the element. ", "type": "String -> Html.Attribute msg"}, {"name": "type_", "comment": " Defines the type of a `button`, `input`, `embed`, `object`, `script`,\n`source`, `style`, or `menu`.\n", "type": "String -> Html.Attribute msg"}, {"name": "usemap", "comment": " Specify the hash name reference of a `map` that should be used for an `img`\nor `object`. A hash name reference is a hash symbol followed by the element's name or id.\nE.g. `\"#planet-map\"`.\n", "type": "String -> Html.Attribute msg"}, {"name": "value", "comment": " Defines a default value which will be displayed in a `button`, `option`,\n`input`, `li`, `meter`, `progress`, or `param`.\n", "type": "String -> Html.Attribute msg"}, {"name": "width", "comment": " Declare the width of a `canvas`, `embed`, `iframe`, `img`, `input`,\n`object`, or `video`.\n", "type": "Int -> Html.Attribute msg"}, {"name": "wrap", "comment": " Indicates whether the text should be wrapped in a `textarea`. Possible\nvalues are \"hard\" and \"soft\".\n", "type": "String -> Html.Attribute msg"}], "generated-with-elm-version": "0.18.0"}, {"name": "Html.Events", "comment": "\nIt is often helpful to create an [Union Type][] so you can have many different kinds\nof events as seen in the [TodoMVC][] example.\n\n[Union Type]: http://elm-lang.org/learn/Union-Types.elm\n[TodoMVC]: https://github.com/evancz/elm-todomvc/blob/master/Todo.elm\n\n# Mouse Helpers\n@docs onClick, onDoubleClick,\n      onMouseDown, onMouseUp,\n      onMouseEnter, onMouseLeave,\n      onMouseOver, onMouseOut\n\n# Form Helpers\n@docs onInput, onCheck, onSubmit\n\n# Focus Helpers\n@docs onBlur, onFocus\n\n# Custom Event Handlers\n@docs on, onWithOptions, Options, defaultOptions\n\n# Custom Decoders\n@docs targetValue, targetChecked, keyCode\n", "aliases": [{"name": "Options", "comment": " Options for an event listener. If `stopPropagation` is true, it means the\nevent stops traveling through the DOM so it will not trigger any other event\nlisteners. If `preventDefault` is true, any built-in browser behavior related\nto the event is prevented. For example, this is used with touch events when you\nwant to treat them as gestures of your own, not as scrolls.\n", "args": [], "type": "{ stopPropagation : Bool, preventDefault : Bool }"}], "types": [], "values": [{"name": "defaultOptions", "comment": " Everything is `False` by default.\n\n    defaultOptions =\n        { stopPropagation = False\n        , preventDefault = False\n        }\n", "type": "Html.Events.Options"}, {"name": "keyCode", "comment": " A `Json.Decoder` for grabbing `event.keyCode`. This helps you define\nkeyboard listeners like this:\n\n    import Json.Decode as Json\n\n    onKeyUp : (Int -> msg) -> Attribute msg\n    onKeyUp tagger =\n      on \"keyup\" (Json.map tagger keyCode)\n\n**Note:** It looks like the spec is moving away from `event.keyCode` and\ntowards `event.key`. Once this is supported in more browsers, we may add\nhelpers here for `onKeyUp`, `onKeyDown`, `onKeyPress`, etc.\n", "type": "Json.Decode.Decoder Int"}, {"name": "on", "comment": " Create a custom event listener. Normally this will not be necessary, but\nyou have the power! Here is how `onClick` is defined for example:\n\n    import Json.Decode as Json\n\n    onClick : msg -> Attribute msg\n    onClick message =\n      on \"click\" (Json.succeed message)\n\nThe first argument is the event name in the same format as with JavaScript's\n[`addEventListener`][aEL] function.\n\nThe second argument is a JSON decoder. Read more about these [here][decoder].\nWhen an event occurs, the decoder tries to turn the event object into an Elm\nvalue. If successful, the value is routed to your `update` function. In the\ncase of `onClick` we always just succeed with the given `message`.\n\nIf this is confusing, work through the [Elm Architecture Tutorial][tutorial].\nIt really does help!\n\n[aEL]: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n[decoder]: http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode\n[tutorial]: https://github.com/evancz/elm-architecture-tutorial/\n", "type": "String -> Json.Decode.Decoder msg -> Html.Attribute msg"}, {"name": "onBlur", "comment": "", "type": "msg -> Html.Attribute msg"}, {"name": "onCheck", "comment": " Capture [change](https://developer.mozilla.org/en-US/docs/Web/Events/change)\nevents on checkboxes. It will grab the boolean value from `event.target.checked`\non any input event.\n\nCheck out [targetChecked](#targetChecked) for more details on how this works.\n", "type": "(Bool -> msg) -> Html.Attribute msg"}, {"name": "onClick", "comment": "", "type": "msg -> Html.Attribute msg"}, {"name": "onDoubleClick", "comment": "", "type": "msg -> Html.Attribute msg"}, {"name": "onFocus", "comment": "", "type": "msg -> Html.Attribute msg"}, {"name": "onInput", "comment": " Capture [input](https://developer.mozilla.org/en-US/docs/Web/Events/input)\nevents for things like text fields or text areas.\n\nIt grabs the **string** value at `event.target.value`, so it will not work if\nyou need some other type of information. For example, if you want to track \ninputs on a range slider, make a custom handler with [`on`](#on).\n\nFor more details on how `onInput` works, check out [targetValue](#targetValue).\n", "type": "(String -> msg) -> Html.Attribute msg"}, {"name": "onMouseDown", "comment": "", "type": "msg -> Html.Attribute msg"}, {"name": "onMouseEnter", "comment": "", "type": "msg -> Html.Attribute msg"}, {"name": "onMouseLeave", "comment": "", "type": "msg -> Html.Attribute msg"}, {"name": "onMouseOut", "comment": "", "type": "msg -> Html.Attribute msg"}, {"name": "onMouseOver", "comment": "", "type": "msg -> Html.Attribute msg"}, {"name": "onMouseUp", "comment": "", "type": "msg -> Html.Attribute msg"}, {"name": "onSubmit", "comment": " Capture a [submit](https://developer.mozilla.org/en-US/docs/Web/Events/submit)\nevent with [`preventDefault`](https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\nin order to prevent the form from changing the page\u2019s location. If you need\ndifferent behavior, use `onWithOptions` to create a customized version of\n`onSubmit`.\n", "type": "msg -> Html.Attribute msg"}, {"name": "onWithOptions", "comment": " Same as `on` but you can set a few options.\n", "type": "String -> Html.Events.Options -> Json.Decode.Decoder msg -> Html.Attribute msg"}, {"name": "targetChecked", "comment": " A `Json.Decoder` for grabbing `event.target.checked`. We use this to define\n`onCheck` as follows:\n\n    import Json.Decode as Json\n\n    onCheck : (Bool -> msg) -> Attribute msg\n    onCheck tagger =\n      on \"input\" (Json.map tagger targetChecked)\n", "type": "Json.Decode.Decoder Bool"}, {"name": "targetValue", "comment": " A `Json.Decoder` for grabbing `event.target.value`. We use this to define\n`onInput` as follows:\n\n    import Json.Decode as Json\n\n    onInput : (String -> msg) -> Attribute msg\n    onInput tagger =\n      on \"input\" (Json.map tagger targetValue)\n\nYou probably will never need this, but hopefully it gives some insights into\nhow to make custom event handlers.\n", "type": "Json.Decode.Decoder String"}], "generated-with-elm-version": "0.18.0"}, {"name": "Html.Keyed", "comment": " A keyed node helps optimize cases where children are getting added, moved,\nremoved, etc. Common examples include:\n\n  - The user can delete items from a list.\n  - The user can create new items in a list.\n  - You can sort a list based on name or date or whatever.\n\nWhen you use a keyed node, every child is paired with a string identifier. This\nmakes it possible for the underlying diffing algorithm to reuse nodes more\nefficiently.\n\n# Keyed Nodes\n@docs node\n\n# Commonly Keyed Nodes\n@docs ol, ul\n", "aliases": [], "types": [], "values": [{"name": "node", "comment": " Works just like `Html.node`, but you add a unique identifier to each child\nnode. You want this when you have a list of nodes that is changing: adding\nnodes, removing nodes, etc. In these cases, the unique identifiers help make\nthe DOM modifications more efficient.\n", "type": "String -> List (Html.Attribute msg) -> List ( String, Html.Html msg ) -> Html.Html msg"}, {"name": "ol", "comment": "", "type": "List (Html.Attribute msg) -> List ( String, Html.Html msg ) -> Html.Html msg"}, {"name": "ul", "comment": "", "type": "List (Html.Attribute msg) -> List ( String, Html.Html msg ) -> Html.Html msg"}], "generated-with-elm-version": "0.18.0"}, {"name": "Html", "comment": " This file is organized roughly in order of popularity. The tags which you'd\nexpect to use frequently will be closer to the top.\n\n# Primitives\n@docs Html, Attribute, text, node, map\n\n# Programs\n@docs beginnerProgram, program, programWithFlags\n\n# Tags\n\n## Headers\n@docs h1, h2, h3, h4, h5, h6\n\n## Grouping Content\n@docs div, p, hr, pre, blockquote\n\n## Text\n@docs span, a, code, em, strong, i, b, u, sub, sup, br\n\n## Lists\n@docs ol, ul, li, dl, dt, dd\n\n## Emdedded Content\n@docs img, iframe, canvas, math\n\n## Inputs\n@docs form, input, textarea, button, select, option\n\n## Sections\n@docs section, nav, article, aside, header, footer, address, main_, body\n\n## Figures\n@docs figure, figcaption\n\n## Tables\n@docs table, caption, colgroup, col, tbody, thead, tfoot, tr, td, th\n\n\n## Less Common Elements\n\n### Less Common Inputs\n@docs fieldset, legend, label, datalist, optgroup, keygen, output, progress, meter\n\n### Audio and Video\n@docs audio, video, source, track\n\n### Embedded Objects\n@docs embed, object, param\n\n### Text Edits\n@docs ins, del\n\n### Semantic Text\n@docs small, cite, dfn, abbr, time, var, samp, kbd, s, q\n\n### Less Common Text Tags\n@docs mark, ruby, rt, rp, bdi, bdo, wbr\n\n## Interactive Elements\n@docs details, summary, menuitem, menu\n\n", "aliases": [{"name": "Attribute", "comment": " Set attributes on your `Html`. Learn more in the\n[`Html.Attributes`](Html-Attributes) module.\n", "args": ["msg"], "type": "VirtualDom.Property msg"}, {"name": "Html", "comment": " The core building block used to build up HTML. Here we create an `Html`\nvalue with no attributes and one child:\n\n    hello : Html msg\n    hello =\n      div [] [ text \"Hello!\" ]\n", "args": ["msg"], "type": "VirtualDom.Node msg"}], "types": [], "values": [{"name": "a", "comment": " Represents a hyperlink, linking to another resource. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "abbr", "comment": " Represents an abbreviation or an acronym; the expansion of the\nabbreviation can be represented in the title attribute.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "address", "comment": " Defines a section containing contact information. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "article", "comment": " Defines self-contained content that could exist independently of the rest\nof the content.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "aside", "comment": " Defines some content loosely related to the page content. If it is removed,\nthe remaining content still makes sense.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "audio", "comment": " Represents a sound or audio stream. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "b", "comment": " Represents a text which to which attention is drawn for utilitarian\npurposes. It doesn't convey extra importance and doesn't imply an alternate\nvoice.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "bdi", "comment": " Represents text that must be isolated from its surrounding for\nbidirectional text formatting. It allows embedding a span of text with a\ndifferent, or unknown, directionality.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "bdo", "comment": " Represents the directionality of its children, in order to explicitly\noverride the Unicode bidirectional algorithm.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "beginnerProgram", "comment": " Create a [`Program`][program] that describes how your whole app works.\n\nRead about [The Elm Architecture][tea] to learn how to use this. Just do it.\nThe additional context is very worthwhile! (Honestly, it is best to just read\nthat guide from front to back instead of muddling around and reading it\npiecemeal.)\n\n[program]: http://package.elm-lang.org/packages/elm-lang/core/latest/Platform#Program\n[tea]: https://guide.elm-lang.org/architecture/\n", "type": "{ model : model , view : model -> Html.Html msg , update : msg -> model -> model } -> Platform.Program Basics.Never model msg"}, {"name": "blockquote", "comment": " Represents a content that is quoted from another source. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "body", "comment": " Represents the content of an HTML document. There is only one `body`\nelement in a document.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "br", "comment": " Represents a line break. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "button", "comment": " Represents a button. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "canvas", "comment": " Represents a bitmap area for graphics rendering. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "caption", "comment": " Represents the title of a table. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "cite", "comment": " Represents the title of a work. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "code", "comment": " Represents computer code. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "col", "comment": " Represents a column of a table. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "colgroup", "comment": " Represents a set of one or more columns of a table. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "datalist", "comment": " Represents a set of predefined options for other controls. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "dd", "comment": " Represents the definition of the terms immediately listed before it. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "del", "comment": " Defines a removal from the document. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "details", "comment": " Represents a widget from which the user can obtain additional information\nor controls.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "dfn", "comment": " Represents a term whose definition is contained in its nearest ancestor\ncontent.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "div", "comment": " Represents a generic container with no special meaning. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "dl", "comment": " Defines a definition list, that is, a list of terms and their associated\ndefinitions.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "dt", "comment": " Represents a term defined by the next `dd`. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "em", "comment": " Represents emphasized text, like a stress accent. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "embed", "comment": " Represents a integration point for an external, often non-HTML,\napplication or interactive content.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "fieldset", "comment": " Represents a set of controls. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "figcaption", "comment": " Represents the legend of a figure. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "figure", "comment": " Represents a figure illustrated as part of the document. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "footer", "comment": " Defines the footer for a page or section. It often contains a copyright\nnotice, some links to legal information, or addresses to give feedback.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "form", "comment": " Represents a form, consisting of controls, that can be submitted to a\nserver for processing.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "h1", "comment": "", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "h2", "comment": "", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "h3", "comment": "", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "h4", "comment": "", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "h5", "comment": "", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "h6", "comment": "", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "header", "comment": " Defines the header of a page or section. It often contains a logo, the\ntitle of the web site, and a navigational table of content.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "hr", "comment": " Represents a thematic break between paragraphs of a section or article or\nany longer content.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "i", "comment": " Represents some text in an alternate voice or mood, or at least of\ndifferent quality, such as a taxonomic designation, a technical term, an\nidiomatic phrase, a thought, or a ship name.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "iframe", "comment": " Embedded an HTML document. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "img", "comment": " Represents an image. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "input", "comment": " Represents a typed data field allowing the user to edit the data. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "ins", "comment": " Defines an addition to the document. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "kbd", "comment": " Represents user input, often from the keyboard, but not necessarily; it\nmay represent other input, like transcribed voice commands.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "keygen", "comment": " Represents a key-pair generator control. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "label", "comment": " Represents the caption of a form control. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "legend", "comment": " Represents the caption for a `fieldset`. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "li", "comment": " Defines a item of an enumeration list. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "main_", "comment": " Defines the main or important content in the document. There is only one\n`main` element in the document.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "map", "comment": " Transform the messages produced by some `Html`. In the following example,\nwe have `viewButton` that produces `()` messages, and we transform those values\ninto `Msg` values in `view`.\n\n    type Msg = Left | Right\n\n    view : model -> Html Msg\n    view model =\n      div []\n        [ map (\\_ -> Left) (viewButton \"Left\")\n        , map (\\_ -> Right) (viewButton \"Right\")\n        ]\n\n    viewButton : String -> Html ()\n    viewButton name =\n      button [ onClick () ] [ text name ]\n\nThis should not come in handy too often. Definitely read [this][reuse] before\ndeciding if this is what you want.\n\n[reuse]: https://guide.elm-lang.org/reuse/\n", "type": "(a -> msg) -> Html.Html a -> Html.Html msg"}, {"name": "mark", "comment": " Represents text highlighted for reference purposes, that is for its\nrelevance in another context.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "math", "comment": " Defines a mathematical formula. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "menu", "comment": " Represents a list of commands. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "menuitem", "comment": " Represents a command that the user can invoke. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "meter", "comment": " Represents a scalar measurement (or a fractional value), within a known\nrange.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "nav", "comment": " Defines a section that contains only navigation links.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "node", "comment": " General way to create HTML nodes. It is used to define all of the helper\nfunctions in this library.\n\n    div : List (Attribute msg) -> List (Html msg) -> Html msg\n    div attributes children =\n        node \"div\" attributes children\n\nYou can use this to create custom nodes if you need to create something that\nis not covered by the helper functions in this library.\n", "type": "String -> List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "object", "comment": " Represents an external resource, which is treated as an image, an HTML\nsub-document, or an external resource to be processed by a plug-in.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "ol", "comment": " Defines an ordered list of items. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "optgroup", "comment": " Represents a set of options, logically grouped. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "option", "comment": " Represents an option in a `select` element or a suggestion of a `datalist`\nelement.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "output", "comment": " Represents the result of a calculation. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "p", "comment": " Defines a portion that should be displayed as a paragraph. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "param", "comment": " Defines parameters for use by plug-ins invoked by `object` elements. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "pre", "comment": " Indicates that its content is preformatted and that this format must be\npreserved.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "program", "comment": " Create a [`Program`][program] that describes how your whole app works.\n\nRead about [The Elm Architecture][tea] to learn how to use this. Just do it.\nCommands and subscriptions make way more sense when you work up to them\ngradually and see them in context with examples.\n\n[program]: http://package.elm-lang.org/packages/elm-lang/core/latest/Platform#Program\n[tea]: https://guide.elm-lang.org/architecture/\n", "type": "{ init : ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg , view : model -> Html.Html msg } -> Platform.Program Basics.Never model msg"}, {"name": "programWithFlags", "comment": " Create a [`Program`][program] that describes how your whole app works.\n\nIt works just like `program` but you can provide &ldquo;flags&rdquo; from\nJavaScript to configure your application. Read more about that [here][].\n\n[program]: http://package.elm-lang.org/packages/elm-lang/core/latest/Platform#Program\n[here]: https://guide.elm-lang.org/interop/javascript.html\n", "type": "{ init : flags -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg , view : model -> Html.Html msg } -> Platform.Program flags model msg"}, {"name": "progress", "comment": " Represents the completion progress of a task. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "q", "comment": " Represents an inline quotation. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "rp", "comment": " Represents parenthesis around a ruby annotation, used to display the\nannotation in an alternate way by browsers not supporting the standard display\nfor annotations.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "rt", "comment": " Represents the text of a ruby annotation. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "ruby", "comment": " Represents content to be marked with ruby annotations, short runs of text\npresented alongside the text. This is often used in conjunction with East Asian\nlanguage where the annotations act as a guide for pronunciation, like the\nJapanese furigana.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "s", "comment": " Represents content that is no longer accurate or relevant. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "samp", "comment": " Represents the output of a program or a computer. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "section", "comment": " Defines a section in a document.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "select", "comment": " Represents a control allowing selection among a set of options. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "small", "comment": " Represents a side comment, that is, text like a disclaimer or a\ncopyright, which is not essential to the comprehension of the document.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "source", "comment": " Allows authors to specify alternative media resources for media elements\nlike `video` or `audio`.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "span", "comment": " Represents text with no specific meaning. This has to be used when no other\ntext-semantic element conveys an adequate meaning, which, in this case, is\noften brought by global attributes like `class`, `lang`, or `dir`.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "strong", "comment": " Represents especially important text. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "sub", "comment": " Represent a subscript. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "summary", "comment": " Represents a summary, caption, or legend for a given `details`. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "sup", "comment": " Represent a superscript. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "table", "comment": " Represents data with more than one dimension. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "tbody", "comment": " Represents the block of rows that describes the concrete data of a table.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "td", "comment": " Represents a data cell in a table. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "text", "comment": " Just put plain text in the DOM. It will escape the string so that it appears\nexactly as you specify.\n\n    text \"Hello World!\"\n", "type": "String -> Html.Html msg"}, {"name": "textarea", "comment": " Represents a multiline text edit control. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "tfoot", "comment": " Represents the block of rows that describes the column summaries of a table.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "th", "comment": " Represents a header cell in a table. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "thead", "comment": " Represents the block of rows that describes the column labels of a table.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "time", "comment": " Represents a date and time value; the machine-readable equivalent can be\nrepresented in the datetime attribute.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "tr", "comment": " Represents a row of cells in a table. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "track", "comment": " Allows authors to specify timed text track for media elements like `video`\nor `audio`.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "u", "comment": " Represents a non-textual annoatation for which the conventional\npresentation is underlining, such labeling the text as being misspelt or\nlabeling a proper name in Chinese text.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "ul", "comment": " Defines an unordered list of items. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "var", "comment": " Represents a variable. Specific cases where it should be used include an\nactual mathematical expression or programming context, an identifier\nrepresenting a constant, a symbol identifying a physical quantity, a function\nparameter, or a mere placeholder in prose.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "video", "comment": " Represents a video, the associated audio and captions, and controls. ", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}, {"name": "wbr", "comment": " Represents a line break opportunity, that is a suggested point for\nwrapping text in order to improve readability of text split on several lines.\n", "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"}], "generated-with-elm-version": "0.18.0"}]}, {"name": "elm-lang/svg", "modules": [{"name": "Svg.Lazy", "comment": " Since all Elm functions are pure we have a guarantee that the same input\nwill always result in the same output. This module gives us tools to be lazy\nabout building `Svg` that utilize this fact.\n\nRather than immediately applying functions to their arguments, the `lazy`\nfunctions just bundle the function and arguments up for later. When diffing\nthe old and new virtual DOM, it checks to see if all the arguments are equal.\nIf so, it skips calling the function!\n\nThis is a really cheap test and often makes things a lot faster, but definitely\nbenchmark to be sure!\n\n@docs lazy, lazy2, lazy3\n", "aliases": [], "types": [], "values": [{"name": "lazy", "comment": " A performance optimization that delays the building of virtual DOM nodes.\n\nCalling `(view model)` will definitely build some virtual DOM, perhaps a lot of\nit. Calling `(lazy view model)` delays the call until later. During diffing, we\ncan check to see if `model` is referentially equal to the previous value used,\nand if so, we just stop. No need to build up the tree structure and diff it,\nwe know if the input to `view` is the same, the output must be the same!\n", "type": "(a -> Svg.Svg msg) -> a -> Svg.Svg msg"}, {"name": "lazy2", "comment": " Same as `lazy` but checks on two arguments.\n", "type": "(a -> b -> Svg.Svg msg) -> a -> b -> Svg.Svg msg"}, {"name": "lazy3", "comment": " Same as `lazy` but checks on three arguments.\n", "type": "(a -> b -> c -> Svg.Svg msg) -> a -> b -> c -> Svg.Svg msg"}], "generated-with-elm-version": "0.18.0"}, {"name": "Svg.Events", "comment": "\n\n# Animation event attributes\n@docs onBegin, onEnd, onRepeat\n\n# Document event attributes\n@docs onAbort, onError, onResize, onScroll, onLoad, onUnload, onZoom\n\n# Graphical event attributes\n@docs onActivate, onClick, onFocusIn, onFocusOut, onMouseDown, onMouseMove,\n  onMouseOut, onMouseOver, onMouseUp\n\n# Custom Events\n@docs on\n\n", "aliases": [], "types": [], "values": [{"name": "on", "comment": " Create a custom event listener.\n\n    import Json.Decode as Json\n\n    onClick : msg -> Attribute msg\n    onClick msg =\n      on \"click\" (Json.succeed msg)\n\nYou first specify the name of the event in the same format as with JavaScript\u2019s\n`addEventListener`. Next you give a JSON decoder, which lets you pull\ninformation out of the event object. If the decoder succeeds, it will produce\na message and route it to your `update` function.\n", "type": "String -> Json.Decode.Decoder msg -> Svg.Attribute msg"}, {"name": "onAbort", "comment": "", "type": "msg -> Svg.Attribute msg"}, {"name": "onActivate", "comment": "", "type": "msg -> Svg.Attribute msg"}, {"name": "onBegin", "comment": "", "type": "msg -> Svg.Attribute msg"}, {"name": "onClick", "comment": "", "type": "msg -> Svg.Attribute msg"}, {"name": "onEnd", "comment": "", "type": "msg -> Svg.Attribute msg"}, {"name": "onError", "comment": "", "type": "msg -> Svg.Attribute msg"}, {"name": "onFocusIn", "comment": "", "type": "msg -> Svg.Attribute msg"}, {"name": "onFocusOut", "comment": "", "type": "msg -> Svg.Attribute msg"}, {"name": "onLoad", "comment": "", "type": "msg -> Svg.Attribute msg"}, {"name": "onMouseDown", "comment": "", "type": "msg -> Svg.Attribute msg"}, {"name": "onMouseMove", "comment": "", "type": "msg -> Svg.Attribute msg"}, {"name": "onMouseOut", "comment": "", "type": "msg -> Svg.Attribute msg"}, {"name": "onMouseOver", "comment": "", "type": "msg -> Svg.Attribute msg"}, {"name": "onMouseUp", "comment": "", "type": "msg -> Svg.Attribute msg"}, {"name": "onRepeat", "comment": "", "type": "msg -> Svg.Attribute msg"}, {"name": "onResize", "comment": "", "type": "msg -> Svg.Attribute msg"}, {"name": "onScroll", "comment": "", "type": "msg -> Svg.Attribute msg"}, {"name": "onUnload", "comment": "", "type": "msg -> Svg.Attribute msg"}, {"name": "onZoom", "comment": "", "type": "msg -> Svg.Attribute msg"}], "generated-with-elm-version": "0.18.0"}, {"name": "Svg.Attributes", "comment": "\n\n# Regular attributes\n@docs accentHeight, accelerate, accumulate, additive, alphabetic, allowReorder,\n  amplitude, arabicForm, ascent, attributeName, attributeType, autoReverse,\n  azimuth, baseFrequency, baseProfile, bbox, begin, bias, by, calcMode,\n  capHeight, class, clipPathUnits, contentScriptType, contentStyleType, cx, cy,\n  d, decelerate, descent, diffuseConstant, divisor, dur, dx, dy, edgeMode,\n  elevation, end, exponent, externalResourcesRequired, filterRes, filterUnits,\n  format, from, fx, fy, g1, g2, glyphName, glyphRef, gradientTransform,\n  gradientUnits, hanging, height, horizAdvX, horizOriginX, horizOriginY, id,\n  ideographic, in_, in2, intercept, k, k1, k2, k3, k4, kernelMatrix,\n  kernelUnitLength, keyPoints, keySplines, keyTimes, lang, lengthAdjust,\n  limitingConeAngle, local, markerHeight, markerUnits, markerWidth,\n  maskContentUnits, maskUnits, mathematical, max, media, method, min, mode,\n  name, numOctaves, offset, operator, order, orient, orientation, origin,\n  overlinePosition, overlineThickness, panose1, path, pathLength,\n  patternContentUnits, patternTransform, patternUnits, pointOrder, points,\n  pointsAtX, pointsAtY, pointsAtZ, preserveAlpha, preserveAspectRatio,\n  primitiveUnits, r, radius, refX, refY, renderingIntent, repeatCount,\n  repeatDur, requiredExtensions, requiredFeatures, restart, result, rotate,\n  rx, ry, scale, seed, slope, spacing, specularConstant, specularExponent,\n  speed, spreadMethod, startOffset, stdDeviation, stemh, stemv, stitchTiles,\n  strikethroughPosition, strikethroughThickness, string, style, surfaceScale,\n  systemLanguage, tableValues, target, targetX, targetY, textLength, title, to,\n  transform, type_, u1, u2, underlinePosition, underlineThickness, unicode,\n  unicodeRange, unitsPerEm, vAlphabetic, vHanging, vIdeographic, vMathematical,\n  values, version, vertAdvY, vertOriginX, vertOriginY, viewBox, viewTarget,\n  width, widths, x, xHeight, x1, x2, xChannelSelector, xlinkActuate,\n  xlinkArcrole, xlinkHref, xlinkRole, xlinkShow, xlinkTitle, xlinkType,\n  xmlBase, xmlLang, xmlSpace, y, y1, y2, yChannelSelector, z, zoomAndPan\n\n# Presentation attributes\n@docs alignmentBaseline, baselineShift, clipPath, clipRule, clip,\n  colorInterpolationFilters, colorInterpolation, colorProfile, colorRendering,\n  color, cursor, direction, display, dominantBaseline, enableBackground,\n  fillOpacity, fillRule, fill, filter, floodColor, floodOpacity, fontFamily,\n  fontSizeAdjust, fontSize, fontStretch, fontStyle, fontVariant, fontWeight,\n  glyphOrientationHorizontal, glyphOrientationVertical, imageRendering,\n  kerning, letterSpacing, lightingColor, markerEnd, markerMid, markerStart,\n  mask, opacity, overflow, pointerEvents, shapeRendering, stopColor,\n  stopOpacity, strokeDasharray, strokeDashoffset, strokeLinecap,\n  strokeLinejoin, strokeMiterlimit, strokeOpacity, strokeWidth, stroke,\n  textAnchor, textDecoration, textRendering, unicodeBidi, visibility,\n  wordSpacing, writingMode\n\n", "aliases": [], "types": [], "values": [{"name": "accelerate", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "accentHeight", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "accumulate", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "additive", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "alignmentBaseline", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "allowReorder", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "alphabetic", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "amplitude", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "arabicForm", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "ascent", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "attributeName", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "attributeType", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "autoReverse", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "azimuth", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "baseFrequency", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "baseProfile", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "baselineShift", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "bbox", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "begin", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "bias", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "by", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "calcMode", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "capHeight", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "class", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "clip", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "clipPath", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "clipPathUnits", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "clipRule", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "color", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "colorInterpolation", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "colorInterpolationFilters", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "colorProfile", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "colorRendering", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "contentScriptType", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "contentStyleType", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "cursor", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "cx", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "cy", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "d", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "decelerate", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "descent", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "diffuseConstant", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "direction", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "display", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "divisor", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "dominantBaseline", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "dur", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "dx", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "dy", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "edgeMode", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "elevation", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "enableBackground", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "end", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "exponent", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "externalResourcesRequired", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "fill", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "fillOpacity", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "fillRule", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "filter", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "filterRes", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "filterUnits", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "floodColor", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "floodOpacity", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "fontFamily", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "fontSize", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "fontSizeAdjust", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "fontStretch", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "fontStyle", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "fontVariant", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "fontWeight", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "format", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "from", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "fx", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "fy", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "g1", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "g2", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "glyphName", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "glyphOrientationHorizontal", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "glyphOrientationVertical", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "glyphRef", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "gradientTransform", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "gradientUnits", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "hanging", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "height", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "horizAdvX", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "horizOriginX", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "horizOriginY", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "id", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "ideographic", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "imageRendering", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "in2", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "in_", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "intercept", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "k", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "k1", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "k2", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "k3", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "k4", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "kernelMatrix", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "kernelUnitLength", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "kerning", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "keyPoints", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "keySplines", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "keyTimes", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "lang", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "lengthAdjust", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "letterSpacing", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "lightingColor", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "limitingConeAngle", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "local", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "markerEnd", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "markerHeight", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "markerMid", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "markerStart", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "markerUnits", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "markerWidth", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "mask", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "maskContentUnits", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "maskUnits", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "mathematical", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "max", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "media", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "method", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "min", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "mode", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "name", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "numOctaves", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "offset", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "opacity", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "operator", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "order", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "orient", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "orientation", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "origin", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "overflow", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "overlinePosition", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "overlineThickness", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "panose1", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "path", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "pathLength", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "patternContentUnits", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "patternTransform", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "patternUnits", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "pointOrder", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "pointerEvents", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "points", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "pointsAtX", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "pointsAtY", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "pointsAtZ", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "preserveAlpha", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "preserveAspectRatio", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "primitiveUnits", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "r", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "radius", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "refX", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "refY", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "renderingIntent", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "repeatCount", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "repeatDur", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "requiredExtensions", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "requiredFeatures", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "restart", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "result", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "rotate", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "rx", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "ry", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "scale", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "seed", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "shapeRendering", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "slope", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "spacing", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "specularConstant", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "specularExponent", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "speed", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "spreadMethod", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "startOffset", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "stdDeviation", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "stemh", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "stemv", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "stitchTiles", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "stopColor", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "stopOpacity", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "strikethroughPosition", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "strikethroughThickness", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "string", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "stroke", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "strokeDasharray", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "strokeDashoffset", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "strokeLinecap", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "strokeLinejoin", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "strokeMiterlimit", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "strokeOpacity", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "strokeWidth", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "style", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "surfaceScale", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "systemLanguage", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "tableValues", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "target", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "targetX", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "targetY", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "textAnchor", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "textDecoration", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "textLength", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "textRendering", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "title", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "to", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "transform", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "type_", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "u1", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "u2", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "underlinePosition", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "underlineThickness", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "unicode", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "unicodeBidi", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "unicodeRange", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "unitsPerEm", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "vAlphabetic", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "vHanging", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "vIdeographic", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "vMathematical", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "values", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "version", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "vertAdvY", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "vertOriginX", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "vertOriginY", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "viewBox", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "viewTarget", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "visibility", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "width", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "widths", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "wordSpacing", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "writingMode", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "x", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "x1", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "x2", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "xChannelSelector", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "xHeight", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "xlinkActuate", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "xlinkArcrole", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "xlinkHref", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "xlinkRole", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "xlinkShow", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "xlinkTitle", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "xlinkType", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "xmlBase", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "xmlLang", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "xmlSpace", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "y", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "y1", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "y2", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "yChannelSelector", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "z", "comment": "", "type": "String -> Svg.Attribute msg"}, {"name": "zoomAndPan", "comment": "", "type": "String -> Svg.Attribute msg"}], "generated-with-elm-version": "0.18.0"}, {"name": "Svg.Keyed", "comment": " A keyed node helps optimize cases where children are getting added, moved,\nremoved, etc. Common examples include:\n\n  - The user can delete items from a list.\n  - The user can create new items in a list.\n  - You can sort a list based on name or date or whatever.\n\nWhen you use a keyed node, every child is paired with a string identifier. This\nmakes it possible for the underlying diffing algorithm to reuse nodes more\nefficiently.\n\n# Keyed Nodes\n@docs node\n\n", "aliases": [], "types": [], "values": [{"name": "node", "comment": " Works just like `Svg.node`, but you add a unique identifier to each child\nnode. You want this when you have a list of nodes that is changing: adding\nnodes, removing nodes, etc. In these cases, the unique identifiers help make\nthe DOM modifications more efficient.\n", "type": "String -> List (Svg.Attribute msg) -> List ( String, Svg.Svg msg ) -> Svg.Svg msg"}], "generated-with-elm-version": "0.18.0"}, {"name": "Svg", "comment": "\n\n# SVG Nodes\n@docs Svg, Attribute, text, node, map\n\n# HTML Embedding\n@docs svg, foreignObject\n\n# Graphics elements\n@docs circle, ellipse, image, line, path, polygon, polyline, rect, use\n\n# Animation elements\n@docs animate, animateColor, animateMotion, animateTransform, mpath, set\n\n# Descriptive elements\n@docs desc, metadata, title\n\n# Containers\n@docs a, defs, g, marker, mask, pattern, switch, symbol\n\n# Text\n@docs altGlyph, altGlyphDef, altGlyphItem, glyph, glyphRef, textPath, text_,\n  tref, tspan\n\n# Fonts\n@docs font\n\n# Gradients\n@docs linearGradient, radialGradient, stop\n\n# Filters\n@docs feBlend, feColorMatrix, feComponentTransfer, feComposite,\n  feConvolveMatrix, feDiffuseLighting, feDisplacementMap, feFlood, feFuncA,\n  feFuncB, feFuncG, feFuncR, feGaussianBlur, feImage, feMerge, feMergeNode,\n  feMorphology, feOffset, feSpecularLighting, feTile, feTurbulence\n\n# Light source elements\n@docs feDistantLight, fePointLight, feSpotLight\n\n# Miscellaneous\n@docs clipPath, colorProfile, cursor, filter, script, style, view\n", "aliases": [{"name": "Attribute", "comment": " Set attributes on your `Svg`.\n", "args": ["msg"], "type": "VirtualDom.Property msg"}, {"name": "Svg", "comment": " The core building block to create SVG. This library is filled with helper\nfunctions to create these `Svg` values.\n\nThis is backed by `VirtualDom.Node` in `evancz/virtual-dom`, but you do not\nneed to know any details about that to use this library!\n", "args": ["msg"], "type": "VirtualDom.Node msg"}], "types": [], "values": [{"name": "a", "comment": " The SVG Anchor Element defines a hyperlink.\n", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "altGlyph", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "altGlyphDef", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "altGlyphItem", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "animate", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "animateColor", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "animateMotion", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "animateTransform", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "circle", "comment": " The circle element is an SVG basic shape, used to create circles based on\na center point and a radius.\n\n    circle [ cx \"60\", cy \"60\", r \"50\" ] []\n", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "clipPath", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "colorProfile", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "cursor", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "defs", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "desc", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "ellipse", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feBlend", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feColorMatrix", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feComponentTransfer", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feComposite", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feConvolveMatrix", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feDiffuseLighting", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feDisplacementMap", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feDistantLight", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feFlood", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feFuncA", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feFuncB", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feFuncG", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feFuncR", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feGaussianBlur", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feImage", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feMerge", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feMergeNode", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feMorphology", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feOffset", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "fePointLight", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feSpecularLighting", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feSpotLight", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feTile", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "feTurbulence", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "filter", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "font", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "foreignObject", "comment": "", "type": "List (Svg.Attribute msg) -> List (Html.Html msg) -> Svg.Svg msg"}, {"name": "g", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "glyph", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "glyphRef", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "image", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "line", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "linearGradient", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "map", "comment": " Transform the messages produced by some `Svg`.\n", "type": "(a -> msg) -> Svg.Svg a -> Svg.Svg msg"}, {"name": "marker", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "mask", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "metadata", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "mpath", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "node", "comment": " Create any SVG node. To create a `<rect>` helper function, you would write:\n\n    rect : List (Attribute msg) -> List (Svg msg) -> Svg msg\n    rect attributes children =\n        node \"rect\" attributes children\n\nYou should always be able to use the helper functions already defined in this\nlibrary though!\n", "type": "String -> List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "path", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "pattern", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "polygon", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "polyline", "comment": " The polyline element is an SVG basic shape, used to create a series of\nstraight lines connecting several points. Typically a polyline is used to\ncreate open shapes.\n\n    polyline [ fill \"none\", stroke \"black\", points \"20,100 40,60 70,80 100,20\" ] []\n", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "radialGradient", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "rect", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "script", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "set", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "stop", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "style", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "svg", "comment": " The root `<svg>` node for any SVG scene. This example shows a scene\ncontaining a rounded rectangle:\n\n    import Html\n    import Svg exposing (..)\n    import Svg.Attributes exposing (..)\n\n    roundRect : Html.Html msg\n    roundRect =\n        svg\n          [ width \"120\", height \"120\", viewBox \"0 0 120 120\" ]\n          [ rect [ x \"10\", y \"10\", width \"100\", height \"100\", rx \"15\", ry \"15\" ] [] ]\n", "type": "List (Html.Attribute msg) -> List (Svg.Svg msg) -> Html.Html msg"}, {"name": "switch", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "symbol", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "text", "comment": " A simple text node, no tags at all.\n\nWarning: not to be confused with `text_` which produces the SVG `<text>` tag!\n", "type": "String -> Svg.Svg msg"}, {"name": "textPath", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "text_", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "title", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "tref", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "tspan", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "use", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}, {"name": "view", "comment": "", "type": "List (Svg.Attribute msg) -> List (Svg.Svg msg) -> Svg.Svg msg"}], "generated-with-elm-version": "0.18.0"}]}, {"name": "evancz/elm-markdown", "modules": [{"name": "Markdown", "comment": " A library for markdown parsing. This is just an Elm API built on top of the\n[marked](https://github.com/chjj/marked) project which focuses on speed.\n\n# Parsing Markdown\n@docs toHtml\n\n# Parsing with Custom Options\n@docs Options, defaultOptions, toHtmlWith\n", "aliases": [{"name": "Options", "comment": " Some parser options so you can tweak things for your particular case.\n\n  * `githubFlavored` &mdash; overall reasonable improvements on the original\n    markdown parser as described [here][gfm]. This includes stuff like [fenced\n    code blocks][fenced]. There are some odd parts though, such as [tables][]\n    and a setting to turn all newlines into newlines in the resulting output,\n    so there are settings to turn those on or off based on your preference.\n\n  * `defaultHighlighting` &mdash; a default language to use for code blocks that do\n    not have a language tag. So setting this to `Just \"elm\"` will treat all\n    unlabeled code blocks as Elm code. (This relies on [highlight.js][highlight]\n    as explained in the README [here](../#code-blocks).)\n\n  * `sanitize` &mdash; this determines if all HTML should be escaped. If you\n    are parsing user markdown or user input can somehow reach the markdown\n    parser, you should almost certainly turn on sanitation. If it is just you\n    writing markdown, turning sanitation off is a nice way to do some HTML\n    tricks if it is needed.\n\n  * `smartypants` &mdash; This will automatically upgrade quotes to the\n    prettier versions and turn dashes into [em dashes or en dashes][dash]\n\n\n[gfm]: https://help.github.com/articles/github-flavored-markdown/\n[fenced]: https://help.github.com/articles/github-flavored-markdown/#fenced-code-blocks\n[tables]: https://help.github.com/articles/github-flavored-markdown/#tables\n[highlight]: https://highlightjs.org/\n[dash]: http://en.wikipedia.org/wiki/Dash\n", "args": [], "type": "{ githubFlavored : Maybe.Maybe { tables : Bool, breaks : Bool } , defaultHighlighting : Maybe.Maybe String , sanitize : Bool , smartypants : Bool }"}], "types": [], "values": [{"name": "defaultOptions", "comment": " The `Options` used by the `toElement` and `toHtml` functions.\n\n    { githubFlavored = Just { tables = False, breaks = False }\n    , defaultHighlighting = Nothing\n    , sanitize = False\n    , smartypants = False\n    }\n", "type": "Markdown.Options"}, {"name": "toHtml", "comment": " Turn a markdown string into an HTML element, using the `defaultOptions`.\n\n    recipe : Html msg\n    recipe =\n       Markdown.toHtml [class \"recipe\"] \"\"\"\n\n    # Apple Pie Recipe\n\n    First, invent the universe. Then bake an apple pie.\n\n    \"\"\"\n", "type": "List (Html.Attribute msg) -> String -> Html.Html msg"}, {"name": "toHtmlWith", "comment": " Maybe you want to parse user input into markdown. To stop them from adding\n`<script>` tags, you can use modified parsing options.\n\n    options : Options\n    options =\n        { defaultOptions | sanitize = True }\n\n    toMarkdown : String -> Html\n    toMarkdown userInput =\n        Markdown.toHtmlWith options [] userInput\n", "type": "Markdown.Options -> List (Html.Attribute msg) -> String -> Html.Html msg"}], "generated-with-elm-version": "0.18.0"}]}, {"name": "elm-lang/dom", "modules": [{"name": "Dom.Scroll", "comment": " When you set `overflow-y: scroll` on an element, a scroll bar will appear\nwhen the content overflows the available space. When that happens, you may want\nto modify the scroll position yourself. For example, maybe you have a chat room\nthat autoscrolls as new messages come in. This module provides functions like\n`Dom.Scroll.toBottom` that let you do that kind of thing.\n\n# Vertical\n@docs toTop, toBottom, y, toY\n\n# Horizontal\n@docs toLeft, toRight, x, toX\n\n", "aliases": [], "types": [], "values": [{"name": "toBottom", "comment": " Find the node with the given `Id` and scroll it to the bottom.\n", "type": "Dom.Id -> Task.Task Dom.Error ()"}, {"name": "toLeft", "comment": " Find the node with the given `Id` and scroll it to the far left.\n\nSo `toLeft id` is the same as `toX id 0`.\n", "type": "Dom.Id -> Task.Task Dom.Error ()"}, {"name": "toRight", "comment": " Find the node with the given `Id` and scroll it to the far right.\n", "type": "Dom.Id -> Task.Task Dom.Error ()"}, {"name": "toTop", "comment": " Find the node with the given `Id` and scroll it to the top.\n\nSo `toTop id` is the same as `toY id 0`.\n", "type": "Dom.Id -> Task.Task Dom.Error ()"}, {"name": "toX", "comment": " Set the horizontal scroll to whatever offset you want.\n\nIt works just like `toY`, so check out those docs for a more complete example.\n", "type": "Dom.Id -> Float -> Task.Task Dom.Error ()"}, {"name": "toY", "comment": " Set the vertical scroll to whatever offset you want.\n\nImagine you have a chat room and you want to control how it scrolls. Say the\nfull chat is 400 pixels long, but it is in a box that limits the visible height\nto 100 pixels.\n\n  - If we say `toY \"chat\" 0` it will scroll to the very top.\n  - If we say `toY \"chat\" 300` it will be at the bottom.\n\nIf we provide values outside that range, they just get clamped, so\n`toY \"chat\" 900` is also scrolled to the bottom.\n", "type": "Dom.Id -> Float -> Task.Task Dom.Error ()"}, {"name": "x", "comment": " How much this element is scrolled horizontally.\n\nSay you have a node that does not fit in its container. A scroll bar shows up.\nInitially you are at the far left, which means `x` is `0`. If you scroll right\n300 pixels, `x` will be `300`.\n\nThis is roughly the same as saying [`document.getElementById(id).scrollLeft`][docs].\n\n[docs]: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft\n", "type": "Dom.Id -> Task.Task Dom.Error Float"}, {"name": "y", "comment": " How much this element is scrolled vertically.\n\nSay you have a node that does not fit in its container. A scroll bar shows up.\nInitially you are at the top, which means `y` is `0`. If you scroll down 300\npixels, `y` will be `300`.\n\nThis is roughly the same as saying [`document.getElementById(id).scrollTop`][docs].\n\n[docs]: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop\n", "type": "Dom.Id -> Task.Task Dom.Error Float"}], "generated-with-elm-version": "0.18.0"}, {"name": "Dom.LowLevel", "comment": " This is not for general use. It backs libraries like `elm-lang/mouse` and\n`elm-lang/window` which should cover your needs in most cases. In the rare\ncase that those packages do not seem to cover your scenario, first bring it up\nwith the community. Ask around and learn stuff first! Only get into these\nfunctions after that.\n\n# Global Event Listeners\n@docs onDocument, onWindow\n\n", "aliases": [], "types": [], "values": [{"name": "onDocument", "comment": " Add an event handler on the `document`. The resulting task will never end,\nand when you kill the process it is on, it will detach the relevant JavaScript\nevent listener.\n", "type": "String -> Json.Decode.Decoder msg -> (msg -> Task.Task Basics.Never ()) -> Task.Task Basics.Never Basics.Never"}, {"name": "onWindow", "comment": " Add an event handler on `window`. The resulting task will never end, and\nwhen you kill the process it is on, it will detach the relevant JavaScript\nevent listener.\n", "type": "String -> Json.Decode.Decoder msg -> (msg -> Task.Task Basics.Never ()) -> Task.Task Basics.Never Basics.Never"}], "generated-with-elm-version": "0.18.0"}, {"name": "Dom", "comment": "\n\n# Focus\n@docs focus, blur, Id\n\n# Errors\n@docs Error\n\n", "aliases": [{"name": "Id", "comment": " A unique identifier for a particular DOM node. When you create\n`<div id=\"my-thing\"></div>` you would refer to it with the `Id` `\"my-thing\"`.\n", "args": [], "type": "String"}], "types": [{"name": "Error", "comment": " All the functions here look up DOM nodes by ID. If you ask for an ID that\nis not currently attached to the DOM, you will get this error!\n", "args": [], "cases": [["NotFound", ["String"]]]}], "values": [{"name": "blur", "comment": " On a website, there can only be one thing in focus at a time. A text field,\na check box, etc. Sometimes you want that thing to no longer be in focus. This\nis called &ldquo;blur&rdquo; for reasons that are unclear to almost everybody.\nSo this function tells a particular DOM node to lose focus.\n\n    Dom.blur \"my-thing\"\n\nThis is roughly the same as saying `document.getElementById(id).blur()`.\n", "type": "Dom.Id -> Task.Task Dom.Error ()"}, {"name": "focus", "comment": " On a website, there can only be one thing in focus at a time. A text field,\na check box, etc. This function tells the Elm runtime to move the focus to a\nparticular DOM node.\n\n    Dom.focus \"my-thing\"\n\nThis is roughly the same as saying `document.getElementById(id).focus()`.\n\nNOTE: setting focus can silently fail if the element is invisible. This could be captured as an error by checking to see\nif document.activeElement actually got updated to the element we selected. https://jsbin.com/xeletez/edit?html,js,output\n", "type": "Dom.Id -> Task.Task Dom.Error ()"}], "generated-with-elm-version": "0.18.0"}]}, {"name": "elm-lang/navigation", "modules": [{"name": "Navigation", "comment": " This is a library for managing browser navigation yourself.\n\nThe core functionality is the ability to &ldquo;navigate&rdquo; to new URLs,\nchanging the address bar of the browser *without* the browser kicking off a\nrequest to your servers. Instead, you manage the changes yourself in Elm.\n\n\n# Change the URL\n@docs newUrl, modifyUrl\n\n# Navigation\n@docs back, forward\n\n# Force Page Loads\n@docs load, reload, reloadAndSkipCache\n\n# Programs with Locations\n@docs program, programWithFlags, Location\n\n", "aliases": [{"name": "Location", "comment": " A bunch of information about the address bar.\n\n**Note 1:** Almost everyone will want to use a URL parsing library like\n[`evancz/url-parser`][parse] to turn a `Location` into something more useful\nin your `update` function.\n\n[parse]: https://github.com/evancz/url-parser\n\n**Note 2:** These fields correspond exactly with the fields of `document.location`\nas described [here](https://developer.mozilla.org/en-US/docs/Web/API/Location).\n", "args": [], "type": "{ href : String , host : String , hostname : String , protocol : String , origin : String , port_ : String , pathname : String , search : String , hash : String , username : String , password : String }"}], "types": [], "values": [{"name": "back", "comment": " Go back some number of pages. So `back 1` goes back one page, and `back 2`\ngoes back two pages.\n\n**Note:** You only manage the browser history that *you* created. Think of this\nlibrary as letting you have access to a small part of the overall history. So\nif you go back farther than the history you own, you will just go back to some\nother website!\n", "type": "Int -> Platform.Cmd.Cmd msg"}, {"name": "forward", "comment": " Go forward some number of pages. So `forward 1` goes forward one page, and\n`forward 2` goes forward two pages. If there are no more pages in the future,\nthis will do nothing.\n\n**Note:** You only manage the browser history that *you* created. Think of this\nlibrary as letting you have access to a small part of the overall history. So\nif you go forward farther than the history you own, the user will end up on\nwhatever website they visited next!\n", "type": "Int -> Platform.Cmd.Cmd msg"}, {"name": "load", "comment": " Leave the current page and load the given URL. **This always results in a\npage load**, even if the provided URL is the same as the current one.\n\n    load \"http://elm-lang.org\"\n\nUse [`newUrl`](#newUrl) and [`modifyUrl`](#modifyUrl) if you want to change\nthe URL without a page load.\n", "type": "String -> Platform.Cmd.Cmd msg"}, {"name": "modifyUrl", "comment": " Modify the current URL. This *will not* add a new entry to the browser\nhistory. It just changes the one you are on right now.\n", "type": "String -> Platform.Cmd.Cmd msg"}, {"name": "newUrl", "comment": " Step to a new URL. This will add a new entry to the browser history.\n\n**Note:** If the user has gone `back` a few pages, there will be &ldquo;future\npages&rdquo; that the user can go `forward` to. Adding a new URL in that\nscenario will clear out any future pages. It is like going back in time and\nmaking a different choice.\n", "type": "String -> Platform.Cmd.Cmd msg"}, {"name": "program", "comment": " Same as [`Html.program`][doc], but your `update` function gets messages\nwhenever the URL changes.\n\n[doc]: http://package.elm-lang.org/packages/elm-lang/html/latest/Html#program\n\nThe first difference is the `Location -> msg` argument. This converts a\n[`Location`](#location) into a message whenever the URL changes. That message\nis fed into your `update` function just like any other one.\n\nThe second difference is that the `init` function takes `Location` as an\nargument. This lets you use the URL on the first frame.\n\n**Note:** A location message is produced every time the URL changes. This\nincludes things exposed by this library, like `back` and `newUrl`, as well as\nwhenever the user clicks the back or forward buttons of the browsers. So if\nthe URL changes, you will hear about it in your `update` function.\n", "type": "(Navigation.Location -> msg) -> { init : Navigation.Location -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , view : model -> Html.Html msg , subscriptions : model -> Platform.Sub.Sub msg } -> Platform.Program Basics.Never model msg"}, {"name": "programWithFlags", "comment": " Works the same as [`program`](#program), but it can also handle flags.\nSee [`Html.programWithFlags`][doc] for more information.\n\n[doc]: http://package.elm-lang.org/packages/elm-lang/html/latest/Html#programWithFlags\n", "type": "(Navigation.Location -> msg) -> { init : flags -> Navigation.Location -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , view : model -> Html.Html msg , subscriptions : model -> Platform.Sub.Sub msg } -> Platform.Program flags model msg"}, {"name": "reload", "comment": " Reload the current page. **This always results in a page load!**\nThis may grab resources from the browser cache, so use\n[`reloadAndSkipCache`](reloadAndSkipCache) if you want to be sure\nthat you are not loading any cached resources.\n", "type": "Platform.Cmd.Cmd msg"}, {"name": "reloadAndSkipCache", "comment": " Reload the current page without using the browser cache. **This always\nresults in a page load!** It is more common to want [`reload`](reload).\n", "type": "Platform.Cmd.Cmd msg"}], "generated-with-elm-version": "0.18.0"}]}, {"name": "elm-lang/geolocation", "modules": [{"name": "Geolocation", "comment": " Find out about where a user\u2019s device is located. [Geolocation API][geo].\n\n[geo]: https://developer.mozilla.org/en-US/docs/Web/API/Geolocation\n\n# Location\n@docs Location, Altitude, Movement\n\n# Subscribe to Changes\n@docs changes\n\n# Get Current Location\n@docs now, Error\n\n# Options\n@docs nowWith, Options, defaultOptions\n\n# Low-level Helpers\n\nThere are very few excuses to use this. Any normal user should be using\n`changes` instead.\n\n@docs watch, watchWith\n\n", "aliases": [{"name": "Altitude", "comment": " The altitude in meters relative to sea level is held in `value`. The `accuracy` field\ndescribes how accurate `value` is, also in meters.\n", "args": [], "type": "{ value : Float, accuracy : Float }"}, {"name": "Location", "comment": " All available details of the device's current location in the world.\n\n  * `latitude` &mdash; the latitude in decimal degrees.\n  * `longitude` &mdash; the longitude in decimal degrees.\n  * `accuracy` &mdash; the accuracy of the latitude and longitude, expressed in meters.\n  * `altitude` &mdash; altitude information, if available.\n  * `movement` &mdash; information about how the device is moving, if available.\n  * `timestamp` &mdash; the time that this location reading was taken in milliseconds.\n", "args": [], "type": "{ latitude : Float , longitude : Float , accuracy : Float , altitude : Maybe.Maybe Geolocation.Altitude , movement : Maybe.Maybe Geolocation.Movement , timestamp : Time.Time }"}, {"name": "Options", "comment": " There are a couple options you can mess with when requesting location data.\n\n  * `enableHighAccuracy` &mdash; When enabled, the device will attempt to provide\n    a more accurate location. This can result in slower response times or\n    increased power consumption (with a GPS chip on a mobile device for example).\n    When disabled, the device can take the liberty to save resources by responding\n    more quickly and/or using less power.\n  * `timeout` &mdash; Requesting a location can take time, so you have the option\n    to provide an upper bound in milliseconds on that wait.\n  * `maximumAge` &mdash; This API can return cached locations. If this is set\n    to `Just 400` you may get cached locations as long as they were read in the\n    last 400 milliseconds. If this is `Nothing` then the device must attempt\n    to retrieve the current location every time.\n", "args": [], "type": "{ enableHighAccuracy : Bool , timeout : Maybe.Maybe Int , maximumAge : Maybe.Maybe Int }"}], "types": [{"name": "Error", "comment": " The `now` and `watch` functions may fail for a variaty of reasons.\n\n    * The user may reject the request to use their location.\n    * It may be impossible to get a location.\n    * If you set a timeout in the `Options` the request may just take too long.\n\nIn each case, the browser will provide a string with additional information.\n", "args": [], "cases": [["PermissionDenied", ["String"]], ["LocationUnavailable", ["String"]], ["Timeout", ["String"]]]}, {"name": "Movement", "comment": " Describes the motion of the device. If the device is not moving, this will\njust be `Static`. If the device is moving, you will see the `speed` in meters\nper second and the `degreesFromNorth` in degrees.\n\n\n**Note:** The `degreesFromNorth` value goes clockwise: 0\u00b0 represents true\nnorth, 90\u00b0 is east, 180\u00b0 is south, 270\u00b0 is west, etc.\n", "args": [], "cases": [["Static", []], ["Moving", ["{ speed : Float, degreesFromNorth : Float }"]]]}], "values": [{"name": "changes", "comment": " Subscribe to any location changes. You will only receive updates if the\nuser is moving around.\n", "type": "(Geolocation.Location -> msg) -> Platform.Sub.Sub msg"}, {"name": "defaultOptions", "comment": " The options you will want in 99% of cases. This will get you faster\nresults, less battery drain, no surprise failures due to timeouts, and no\nsurprising cached results.\n\n    { enableHighAccuracy = False\n    , timeout = Nothing\n    , maximumAge = Nothing\n    }\n", "type": "Geolocation.Options"}, {"name": "now", "comment": " Request the location of the user\u2019s device.\n\nOn the first request, the user will need to give permission to access this\ninformation. This task will block until they make a choice. If they do not\ngive permission, the task will result in a `PermissionDenied` error.\n", "type": "Task.Task Geolocation.Error Geolocation.Location"}, {"name": "nowWith", "comment": " Same as `now` but you can customize exactly how locations are reported.\n", "type": "Geolocation.Options -> Task.Task Geolocation.Error Geolocation.Location"}, {"name": "watch", "comment": " This is a low-level API that is used to define things like `changes`.\nIt is really only useful if you need to make an effect manager of your own.\nI feel this will include about 5 people ever.\n\nYou provide two functions. One two take some action on movement and one to\ntake some action on failure. The resulting task will just block forever,\nreporting to these two functions. If you would like to kill a `watch` task,\ndo something like this:\n\n    import Process\n    import Task\n\n    killWatch =\n      Process.spawn (watch onMove onError)\n        |> Task.andThen Process.kill\n\n", "type": "(Geolocation.Location -> Task.Task Basics.Never ()) -> (Geolocation.Error -> Task.Task Basics.Never ()) -> Task.Task x Basics.Never"}, {"name": "watchWith", "comment": " Same as `watch` but you can customize exactly how locations are reported.\n", "type": "Geolocation.Options -> (Geolocation.Location -> Task.Task Basics.Never ()) -> (Geolocation.Error -> Task.Task Basics.Never ()) -> Task.Task x Basics.Never"}], "generated-with-elm-version": "0.18.0"}]}, {"name": "elm-lang/page-visibility", "modules": [{"name": "PageVisibility", "comment": "\n\n# Page Visibility\n@docs Visibility, visibility, isHidden, isVisible\n\n# Changes\n@docs visibilityChanges\n\n# Low Level\n@docs onVisibilityChange\n", "aliases": [], "types": [{"name": "Visibility", "comment": " Value describing whether the page is hidden or visible.\n", "args": [], "cases": [["Visible", []], ["Hidden", []]]}], "values": [{"name": "isHidden", "comment": " Is the page hidden?\n", "type": "Task.Task x Bool"}, {"name": "isVisible", "comment": " Is the page visible?\n", "type": "Task.Task x Bool"}, {"name": "onVisibilityChange", "comment": " A normal user should never need this. This should only be useful if you are\ncreating an effect manager that needs to track page visibility for some reason.\nThe boolean value is from calling `isHidden`.\n\nThis task never completes. Use `Process.spawn` and `Process.kill` to run it in\na separate process and kill it when it is no longer needed.\n", "type": "(Bool -> Task.Task Basics.Never ()) -> Task.Task x Basics.Never"}, {"name": "visibility", "comment": " Get the current page visibility.\n", "type": "Task.Task x PageVisibility.Visibility"}, {"name": "visibilityChanges", "comment": " Subscribe to any visibility changes. You will get updates about the current\nvisibility.\n", "type": "(PageVisibility.Visibility -> msg) -> Platform.Sub.Sub msg"}], "generated-with-elm-version": "0.18.0"}]}, {"name": "elm-lang/websocket", "modules": [{"name": "WebSocket", "comment": " Web sockets make it cheaper to talk to your servers.\n\nConnecting to a server takes some time, so with web sockets, you make that\nconnection once and then keep using. The major benefits of this are:\n\n  1. It faster to send messages. No need to do a bunch of work for every single\n  message.\n\n  2. The server can push messages to you. With normal HTTP you would have to\n  keep *asking* for changes, but a web socket, the server can talk to you\n  whenever it wants. This means there is less unnecessary network traffic.\n\nThe API here attempts to cover the typical usage scenarios, but if you need\nmany unique connections to the same endpoint, you need a different library.\n\n# Web Sockets\n@docs listen, keepAlive, send\n\n", "aliases": [], "types": [], "values": [{"name": "keepAlive", "comment": " Keep a connection alive, but do not report any messages. This is useful\nfor keeping a connection open for when you only need to `send` messages. So\nyou might say something like this:\n\n    subscriptions model =\n      keepAlive \"ws://echo.websocket.org\"\n\n**Note:** If the connection goes down, the effect manager tries to reconnect\nwith an exponential backoff strategy. Any messages you try to `send` while the\nconnection is down are queued and will be sent as soon as possible.\n", "type": "String -> Platform.Sub.Sub msg"}, {"name": "listen", "comment": " Subscribe to any incoming messages on a websocket. You might say something\nlike this:\n\n    type Msg = Echo String | ...\n\n    subscriptions model =\n      listen \"ws://echo.websocket.org\" Echo\n\n**Note:** If the connection goes down, the effect manager tries to reconnect\nwith an exponential backoff strategy. Any messages you try to `send` while the\nconnection is down are queued and will be sent as soon as possible.\n", "type": "String -> (String -> msg) -> Platform.Sub.Sub msg"}, {"name": "send", "comment": " Send a message to a particular address. You might say something like this:\n\n    send \"ws://echo.websocket.org\" \"Hello!\"\n\n**Note:** It is important that you are also subscribed to this address with\n`listen` or `keepAlive`. If you are not, the web socket will be created to\nsend one message and then closed. Not good!\n", "type": "String -> String -> Platform.Cmd.Cmd msg"}], "generated-with-elm-version": "0.18.0"}, {"name": "WebSocket.LowLevel", "comment": " Low-level bindings to [the JavaScript API for web sockets][ws]. This is\nuseful primarily for making effect modules like [WebSocket](WebSocket). So\nif you happen to be the creator of Elixir\u2019s Phoenix framework, and you want\nit to be super easy to use channels, this module will help you make a really\nnice subscription-based API. If you are someone else, you probably do not want\nthese things.\n\n[ws]: https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n\n# WebSockets\n@docs WebSocket\n\n# Using WebSockets\n@docs open, Settings, send, close, closeWith, bytesQueued\n\n# Errors\n@docs BadOpen, BadClose, BadSend\n\n", "aliases": [{"name": "Settings", "comment": " The settings describe how a `WebSocket` works as long as it is still open.\n\nThe `onMessage` function gives you access to (1) the `WebSocket` itself so you\ncan use functions like `send` and `close` and (2) the `Message` from the server\nso you can decide what to do next.\n\nThe `onClose` function tells you everything about why the `WebSocket` is\nclosing. There are a ton of codes with standardized meanings, so learn more\nabout them [here](https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent).\n\nYou will typically want to set up a channel before opening a WebSocket. That\nway the `onMessage` and `onClose` can communicate with the other parts of your\nprogram. **Ideally this is handled by the effect library you are using though.\nMost people should not be working with this stuff directly.**\n", "args": [], "type": "{ onMessage : WebSocket.LowLevel.WebSocket -> String -> Task.Task Basics.Never () , onClose : { code : Int, reason : String, wasClean : Bool } -> Task.Task Basics.Never () }"}], "types": [{"name": "BadClose", "comment": " It is possible to provide invalid codes or reasons for closing a\nconnection. The connection will still be closed, but the `closeWith` function\nwill give you `BadCode` if an invalid code was specified or `BadReason` if your\nreason is too long or contains unpaired surrogates.\n", "args": [], "cases": [["BadCode", []], ["BadReason", []]]}, {"name": "BadOpen", "comment": " Opening the websocket went wrong because:\n\n  1. Maybe you are on an `https://` domain trying to use an `ws://` websocket\n  instead of `wss://`.\n\n  2. You gave an invalid URL or something crazy.\n\n", "args": [], "cases": [["BadSecurity", []], ["BadArgs", []]]}, {"name": "BadSend", "comment": " There are a few ways a send can go wrong. The send function will ultimately\ngive you a `NotOpen` if the connection is no longer open or a `BadString` if\nthe string has unpaired surrogates (badly formatted UTF-16).\n", "args": [], "cases": [["NotOpen", []], ["BadString", []]]}, {"name": "WebSocket", "comment": " A value representing an open connection to a server. Normally every single\nHTTP request must establish a connection with the server, but here we just set\nit up once and keep using it. This means it is faster to send messages.\n\nThere is a request/response pattern for all HTTP requests. Client asks for\nsomething, server gives some response. With websockets, you can drive messages\nfrom the server instead.\n", "args": [], "cases": []}], "values": [{"name": "bytesQueued", "comment": " The number of bytes of data queued by `send` but not yet transmitted to the\nnetwork. If you have been sending data to a closed connection, it will just\npile up on the queue endlessly.\n", "type": "WebSocket.LowLevel.WebSocket -> Task.Task x Int"}, {"name": "close", "comment": " Close a `WebSocket`. If the connection is already closed, it does nothing.\n", "type": "WebSocket.LowLevel.WebSocket -> Task.Task x ()"}, {"name": "closeWith", "comment": " Closes the `WebSocket`. If the connection is already closed, it does nothing.\n\nIn addition to providing the `WebSocket` you want to close, you must provide:\n\n  1. A status code explaining why the connection is being closed. The default\n  value is 1000, indicating indicates a normal \"transaction complete\" closure.\n  There are a ton of different status codes though. See them all\n  [here](https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent).\n\n  2. A human-readable string explaining why the connection is closing. This\n  string must be no longer than 123 bytes of UTF-8 text (not characters).\n\n", "type": "Int -> String -> WebSocket.LowLevel.WebSocket -> Task.Task x (Maybe.Maybe WebSocket.LowLevel.BadClose)"}, {"name": "open", "comment": " Attempt to open a connection to a particular URL.\n", "type": "String -> WebSocket.LowLevel.Settings -> Task.Task WebSocket.LowLevel.BadOpen WebSocket.LowLevel.WebSocket"}, {"name": "send", "comment": " Send a string over the `WebSocket` to the server. If there is any problem\nwith the send, you will get some data about it as the result of running this\ntask.\n", "type": "WebSocket.LowLevel.WebSocket -> String -> Task.Task x (Maybe.Maybe WebSocket.LowLevel.BadSend)"}], "generated-with-elm-version": "0.18.0"}]}, {"name": "elm-lang/mouse", "modules": [{"name": "Mouse", "comment": " This library lets you listen to global mouse events. This is useful\nfor a couple tricky scenarios including:\n\n  - Detecting a \"click\" outside the current component.\n  - Supporting drag-and-drop interactions.\n\n# Mouse Position\n@docs Position, position\n\n# Subscriptions\n@docs clicks, moves, downs, ups\n\n", "aliases": [{"name": "Position", "comment": " The position of the mouse relative to the whole document. So if you are\nscrolled down a bunch, you are still getting a coordinate relative to the\nvery top left corner of the *whole* document.\n", "args": [], "type": "{ x : Int, y : Int }"}], "types": [], "values": [{"name": "clicks", "comment": " Subscribe to mouse clicks anywhere on screen.\n", "type": "(Mouse.Position -> msg) -> Platform.Sub.Sub msg"}, {"name": "downs", "comment": " Get a position whenever the user *presses* the mouse button.\n", "type": "(Mouse.Position -> msg) -> Platform.Sub.Sub msg"}, {"name": "moves", "comment": " Subscribe to mouse moves anywhere on screen. It is best to unsubscribe if\nyou do not need these events. Otherwise you will handle a bunch of events for\nno benefit.\n", "type": "(Mouse.Position -> msg) -> Platform.Sub.Sub msg"}, {"name": "position", "comment": " The decoder used to extract a `Position` from a JavaScript mouse event.\n", "type": "Json.Decode.Decoder Mouse.Position"}, {"name": "ups", "comment": " Get a position whenever the user *releases* the mouse button.\n", "type": "(Mouse.Position -> msg) -> Platform.Sub.Sub msg"}], "generated-with-elm-version": "0.18.0"}]}, {"name": "elm-lang/window", "modules": [{"name": "Window", "comment": " Your application lives in some sort of window. This library helps you\nfigure out how big that window is.\n\n# Window Size\n@docs Size, size, width, height, resizes\n\n", "aliases": [{"name": "Size", "comment": " The size of the window in pixels.\n", "args": [], "type": "{ width : Int, height : Int }"}], "types": [], "values": [{"name": "height", "comment": " Get the current window height.\n", "type": "Task.Task x Int"}, {"name": "resizes", "comment": " Subscribe to any changes in window size.\n", "type": "(Window.Size -> msg) -> Platform.Sub.Sub msg"}, {"name": "size", "comment": " Get the current window size.\n", "type": "Task.Task x Window.Size"}, {"name": "width", "comment": " Get the current window width.\n", "type": "Task.Task x Int"}], "generated-with-elm-version": "0.18.0"}]}, {"name": "elm-lang/keyboard", "modules": [{"name": "Keyboard", "comment": " This library lets you listen to global keyboard events.\n\n# Key Codes\n@docs KeyCode\n\n# Subscriptions\n@docs presses, downs, ups\n\n", "aliases": [{"name": "KeyCode", "comment": " Keyboard keys can be represented as integers. These are called *key codes*.\nYou can use [`toCode`](http://package.elm-lang.org/packages/elm-lang/core/latest/Char#toCode)\nand [`fromCode`](http://package.elm-lang.org/packages/elm-lang/core/latest/Char#fromCode)\nto convert between key codes and characters.\n", "args": [], "type": "Int"}], "types": [], "values": [{"name": "downs", "comment": " Subscribe to get codes whenever a key goes down.\n", "type": "(Keyboard.KeyCode -> msg) -> Platform.Sub.Sub msg"}, {"name": "presses", "comment": " Subscribe to all key presses.\n", "type": "(Keyboard.KeyCode -> msg) -> Platform.Sub.Sub msg"}, {"name": "ups", "comment": " Subscribe to get codes whenever a key goes up.\n", "type": "(Keyboard.KeyCode -> msg) -> Platform.Sub.Sub msg"}], "generated-with-elm-version": "0.18.0"}]}]}